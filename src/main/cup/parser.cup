import java_cup.runtime.*;
import java.util.List;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import java.io.File;
import java.io.StringWriter;
import org.w3c.dom.CDATASection;
import org.w3c.dom.Document;
import org.w3c.dom.Element;  
import org.w3c.dom.NodeList;
import org.w3c.dom.Node;


parser code {:
        
        @Override
	public void report_error(String message, Object info) {

            if (info instanceof String)
                    System.err.println(" " + info + " " + message + "\n");
            else {
                    StringBuffer m = new StringBuffer("Error ");
                    if (info instanceof java_cup.runtime.Symbol) {
                        m.append(("(Se ha encontrado el token \"" + ((Symbol)info).value + "\" en la linea "
                            + ((Symbol)info).left  + ", columna " + ((Symbol)info).right) + ")");
                    }
                    if (message.equals("Couldn't repair and continue parse"))
                        m.append(" ");//: No existe una regla por los momentos para este token.
                    else
                        m.append(" : " + message);
                    System.err.println(m);
            }
        }

        @Override
	public void syntax_error(Symbol s){
            System.err.println( "(Se ha encontrado el token \"" + sym.terminalNames[s.sym] + "\" en la linea " + (s.left+1) + ", columna " + (s.right+1) + ")" ); 
            expected();
        }

        public void expected(){
            List<Integer> token_list = this.expected_token_ids();
            if (token_list.size() <= 0){
                    token_list = this.expected_token_ids();
            }
            String expected_tokens = "";
            for (int i = 0 ; i < token_list.size(); i++){
                    int id = token_list.get(i);
                    if (id == 1){
                            continue;
                    }
                    String terminal_name = sym.terminalNames[id];
                    if (i == token_list.size() - 1){
                            expected_tokens += terminal_name;
                    }else{
                            expected_tokens += terminal_name + " , ";
                    }
            }
            System.err.println("Se esperaba alguno de los siguientes tokens:" + expected_tokens);
        };

        public void report_fatal_error(String message, Object info) {
            report_error(message, info);
            throw new RuntimeException("Fatal Syntax Error");
        }

        @Override
        public int error_sync_size(){
            return 1;
        }
        
:};

action code {:
        /* Contruccion del arbol en XML */

        Document xmlDocument = null;    
        Element nodoPadre = null; 

        private void iniXML() {
        if (xmlDocument == null) {
            try {
                DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
                DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
                xmlDocument = docBuilder.newDocument();//Crear el documento XML
            } catch (Exception e) {
                System.err.println("el Arbol tiene ERROR: " + e.getMessage());
            }
        }
    }

    public void escribirXML() throws javax.xml.transform.TransformerConfigurationException, javax.xml.transform.TransformerException {
        //Escribir el archivo XML         
        xmlDocument.appendChild(nodoPadre);
        TransformerFactory transformerFactory = TransformerFactory.newInstance();
        Transformer transformer = transformerFactory.newTransformer();
        DOMSource origen = new DOMSource(xmlDocument);
        StreamResult result = new StreamResult(new File("AST.xml"));
        transformer.transform(origen, result);
    }
:}


/* Terminals (tokens returned by the scanner). */
//Functiones
terminal Element  Write;
terminal Element  Read;

//Tipos de datos
terminal Element  Array;
terminal Element  Of;
terminal Element  Var;
terminal String  TipoBoolean;
terminal String  TipoChar;
terminal String  TipoInteger;
terminal String  TipoString;

//Operadores
terminal String  OperadorIgual;
terminal String  OperadorDiferente;
terminal String  OperadorMayor;
terminal String  OperadorMenor;
terminal String  OperadorMayorIgual;
terminal String  OperadorMenorIgual;
terminal String  OperadorAnd;
terminal String  OperadorOr;
terminal String  OperadorNot;
terminal String  OperadorSuma;
terminal String  OperadorResta;
terminal String  OperadorMultiplicacion;
terminal String  OperadorMod;
terminal String  OperadorDivision;
terminal String  OperadorDivisionSpecial;

//Estructuras de control
terminal Element  If;
terminal Element  Then;
terminal Element  Else;
terminal Element  Begin;
terminal Element  End;
terminal Element  For;
terminal Element  To;
terminal Element  Do;
terminal Element  While;
terminal Element  Repeat;
terminal Element  Until;

//Otros
terminal String  BracketAbrir;
terminal String  BracketCerrar;
terminal String  ComillaSimple;
terminal String  ComillaDentro;
terminal String  Coma;
terminal String  DosPuntos;
terminal String  DosPuntosIgual;
terminal String  Identificador;
terminal String  LlaveAbrir;
terminal String  LlaveCerrar;
terminal String  ParentesisAbrir;
terminal String  ParentesisCerrar;
terminal String  Program;
terminal String  Procedure;
terminal String  Function;
terminal String  Punto;
terminal String  PuntoComa;

/*Literales*/
terminal String         LiteralEntero;
terminal Character      LiteralCaracter;
terminal String         LiteralBoolean;
terminal String         LiteralString;

/* Non terminals */
nonterminal Element              expr_list;
nonterminal Element              expr;      // used to store evaluated subexpressions
nonterminal Element              literal;
nonterminal Element              program;
nonterminal Element              block;
nonterminal Element              blockProc;
nonterminal Element              identifier;
nonterminal Element              decls;
nonterminal Element              decl;
nonterminal Element              typedecl;
nonterminal Element              vardecls;
nonterminal Element              vardecl;
nonterminal Element              procdecls;
nonterminal Element              procdecl;
nonterminal Element              forstmt;
nonterminal Element              varFor;

nonterminal Element              functionDecl;
nonterminal Element              inlineArgs;
nonterminal Element              inlineArg;
nonterminal Element              procedureDecl;
nonterminal Element              procInlineDecls;
nonterminal Element              procInlineDecl;

nonterminal Element              type;
nonterminal String               identtype;
nonterminal Element              arraytype;
nonterminal String               arrayidenttype;
nonterminal Element              vars;
nonterminal Element              var;
nonterminal Element              expresions;
nonterminal Element              opexpr;

nonterminal Element              exprlist;
nonterminal Element              exprLogical;
nonterminal Element              exprOpLog;
nonterminal Element              opRelacion;
nonterminal Element              opArit;
nonterminal Element              opUnario;
nonterminal Element              opLogico;
nonterminal Element              stmts;
nonterminal Element              stmt;
nonterminal Element              assignstmt;
nonterminal Element              ifstmt;
nonterminal Element              whilestmt;
nonterminal Element              repeatstmt;
nonterminal Element              blockstmt;

nonterminal Element              writestmt;
nonterminal Element              readstmt;


nonterminal Element              integer;
nonterminal Element              character;
nonterminal Element              boolean;
nonterminal Element              string;


/*-* Operator Precedences **/
precedence right DosPuntosIgual;
precedence left OperadorIgual, OperadorMenor, OperadorMayor, OperadorMenorIgual, OperadorMayorIgual, OperadorDiferente;
precedence left OperadorSuma, OperadorResta, OperadorOr;
precedence left OperadorMultiplicacion, OperadorDivision, OperadorMod, OperadorDivisionSpecial, OperadorAnd;
precedence left error;

precedence left Else, PuntoComa;

program         ::= Program var:i PuntoComa block:b Punto
                {:
                    iniXML();
                    nodoPadre = xmlDocument.createElement("Program"); 
                    if (i != null) { nodoPadre.appendChild(i); }
                    if(b != null) { nodoPadre.appendChild(b); }
                    escribirXML();
                :}
                |  error PuntoComa block:b Punto
                {:
                    report_error("Algo esta malo en programa","");
                :}
                ;

block           ::= decls:d Begin stmts:s End
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Block");
                    if (d != null) { nPadre.appendChild(d); }
                    if (s != null) { nPadre.appendChild(s); }
                    RESULT = nPadre;                    
                :}
                ;

blockProc       ::= procInlineDecls:p Begin stmts:s End
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Block");
                    if (p != null) { nPadre.appendChild(p); }
                    if (s != null) { nPadre.appendChild(s); }
                    RESULT = nPadre;                    
                :}
                ;

decls           ::= /* empty */ {: RESULT = null; :}
                |   decl:d decls:ds
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Declarations");
                    if (d != null && ds == null) {
                        RESULT = d;
                    } else if (d == null && ds != null){
                        RESULT = ds;
                    } else if (d != null && ds != null) {
                        nPadre.appendChild(d);
                        nPadre.appendChild(ds);
                        RESULT = nPadre;
                    } else RESULT = null;
                                        
                :}
                ;

decl            ::= Var vardecls:vd
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Declaration");
                    if (vd != null) { 
                        nPadre.appendChild(vd); 
                        RESULT = nPadre;                    
                    } else RESULT = null;
                    
                :}
                | error vardecls:vd {:
                    parser.report_error("Error en la declaracion de variablesasd","");
                :}
                |   functionDecl:f
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Declaration");
                    if (f != null) { nPadre.appendChild(f); RESULT = nPadre;}
                                        
                :}
                |   procedureDecl:p
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Declaration");
                    if (p != null) { nPadre.appendChild(p); RESULT = nPadre;}                    
                :}
                ;

functionDecl    ::= Function var:i ParentesisAbrir inlineArgs:in ParentesisCerrar DosPuntos type:t PuntoComa blockProc:b PuntoComa
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("FunctionDeclaration");
                    if (i != null) { nPadre.appendChild(i); }
                    if (in != null) { nPadre.appendChild(in); }
                    if (t != null) { nPadre.appendChild(t); }
                    if (b != null) { nPadre.appendChild(b); }

                    RESULT = nPadre;                    
                :}
                |   Function var:i ParentesisAbrir ParentesisCerrar DosPuntos type:t PuntoComa blockProc:b PuntoComa
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("FunctionDeclaration");
                    if (i != null) { nPadre.appendChild(i); }
                    if (t != null) { nPadre.appendChild(t); }
                    if (b != null) { nPadre.appendChild(b); }

                    RESULT = nPadre;                    
                :}
                ;

procedureDecl   ::= Procedure var:i ParentesisAbrir inlineArgs:in ParentesisCerrar PuntoComa blockProc:b PuntoComa
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("ProcedureDeclaration");
                    if (i != null) { nPadre.appendChild(i); }
                    if (in != null) { nPadre.appendChild(in); }
                    if (b != null) { nPadre.appendChild(b); }

                    RESULT = nPadre;                    
                :}
                |   Procedure var:i ParentesisAbrir ParentesisCerrar PuntoComa blockProc:b PuntoComa
                {:
                    iniXML(); 
                    Element nPadre = xmlDocument.createElement("ProcedureDeclaration");
                    if (i != null) { nPadre.appendChild(i); }
                    if (b != null) { nPadre.appendChild(b); }

                    RESULT = nPadre;                    
                :}
                | error ParentesisAbrir
                ;

procInlineDecls  ::= {: RESULT = null; :}
                |   procInlineDecl:pd procInlineDecls:pds
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("ProcInlinceDecls");
                    if (pd != null && pds == null) {
                        RESULT = pd;
                    } else if(pd == null && pds != null) {
                        RESULT = pds;
                    } else if(pd != null && pds != null) {
                        nPadre.appendChild(pd);
                        nPadre.appendChild(pds);
                        RESULT = nPadre;
                    } else RESULT = null;               
                :}
                ;

procInlineDecl  ::= Var vardecls:vd
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("VarsDeclarations");
                    if (vd != null){
                        nPadre.appendChild(vd);
                        RESULT = nPadre;
                    }               
                :}
                ;


inlineArgs      ::= inlineArg:ia
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Arguments");
                    if(ia != null) {
                        nPadre.appendChild(ia);
                        RESULT = nPadre;
                    }
                :}
                |   inlineArg:ia PuntoComa inlineArgs:ias
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Arguments");
                    if(ia != null && ias == null) {
                        RESULT = ia;
                    } else if(ia == null && ias != null) {
                        RESULT = ias;
                    } else if(ia == null && ias == null) {
                        nPadre.appendChild(ia);
                        nPadre.appendChild(ias);
                        RESULT = nPadre;
                    }
                :}
                ;

inlineArg       ::= Var vars:vs DosPuntos identtype:i
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("inlineArg");
                    if(vs != null) {
                        nPadre.appendChild(vs);
                    }
                    if( i != null ) {
                        Element nType = xmlDocument.createElement("Type");
                        nType.setAttribute("Value",i);
                        nPadre.appendChild(nType);                        
                    }
                    RESULT = nPadre;
                :}
                |   vars:vs DosPuntos identtype:i 
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("inlineArg");
                    if(vs != null) {
                        nPadre.appendChild(vs);
                    }
                    if( i != null ) {
                        Element nType = xmlDocument.createElement("Type");
                        nType.setAttribute("Value",i);
                        nPadre.appendChild(nType);                        
                    }
                    RESULT = nPadre;
                :}
                ;

vardecls        ::= /* Empty */ {: RESULT = null; :}
                |  vardecl:v PuntoComa vardecls:vs
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("VarsDeclarations");
                    if(v != null && vs == null ){
                        RESULT = v;
                    } else if(v == null && vs != null){
                        RESULT = vs;
                    } else if(v != null && vs != null){
                        nPadre.appendChild(v);
                        nPadre.appendChild(vs);
                        RESULT = nPadre;
                    } else RESULT = null;
                :} 
                | error PuntoComa vardecls:vs 
                {:
                    parser.report_error("Hubo error en declaracion de variable.","");
                :}
                ;

vardecl         ::= vars:vs DosPuntos type:t
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("VarDeclaration");
                    if (vs != null) { nPadre.appendChild(vs); }
                    nPadre.appendChild(t);
                    RESULT = nPadre;                    
                :}
                ;

vars            ::= var:v
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Variable");
                    if (v != null) { nPadre.appendChild(v); }
                    RESULT = nPadre;                    
                :}
                |   var:v Coma vars:vs
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Variables");
                    if (v != null) { nPadre.appendChild(v); }
                    if (vs != null) { nPadre.appendChild(vs); }
                    RESULT = nPadre;                    
                :}
                ;

var             ::= Identificador:i
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Identificador");
                    nPadre.setAttribute("Value",i);            
                    RESULT = nPadre;                    
                :}
                ;

type            ::= identtype:it
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Type");
                    if(it != null) {
                        nPadre.setAttribute("Value",it);
                        RESULT = nPadre;
                    } else RESULT = null;
                :}
                |   arraytype:ats
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Type");
                    if(ats != null) {
                        nPadre.appendChild(ats);
                        RESULT = nPadre;
                    } else RESULT = null;
                :}
                ;

identtype       ::= TipoChar:c
                {:
                   RESULT = c;
                :}
                |   TipoString:c
                {:
                   RESULT = c;
                :}
                |   TipoBoolean:c
                {:
                   RESULT = c;
                :}
                |   TipoInteger:c
                {:
                   RESULT = c;
                :}
                ;


arraytype       ::= Array BracketAbrir integer:i BracketCerrar Of arrayidenttype:t
                {:  
                    iniXML();
                    Element nPadre = xmlDocument.createElement("ArrayType");
                    if(i != null){nPadre.setAttribute("InitialSize",i.getAttribute("Value"));}
                    if(t != null){nPadre.setAttribute("Type",t);}
                    RESULT = nPadre;
                :}
                ;

arrayidenttype  ::= TipoChar:c
                {:
                   RESULT = c;
                :}
                |   TipoBoolean:c
                {:
                   RESULT = c;
                :}
                |   TipoInteger:c
                {:
                   RESULT = c;
                :}
                ;

stmts           ::= stmt:s
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Statements");
                    if (s != null) { nPadre.appendChild(s); RESULT = nPadre;}
                    
                :}
                | stmt:s PuntoComa stmts:ss
                {:
                    Element nPadre = xmlDocument.createElement("Statements");
                    iniXML();
                    if(s != null && ss == null){
                        RESULT = s;
                    } else if(s == null && ss != null){
                        RESULT = ss;
                    } else if(s != null && ss != null){
                        nPadre.appendChild(s);
                        nPadre.appendChild(ss);
                        RESULT = nPadre;
                    } else RESULT = null;
                :}
                ;

stmt            ::= /* Empty */ {: RESULT = null; :}
                | assignstmt:as
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Statement");
                    if (as != null) { nPadre.appendChild(as); }                 
                    RESULT = nPadre;
                :}
                | ifstmt:is
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Statement");
                    if (is != null) { nPadre.appendChild(is); }                 
                    RESULT = nPadre;
                :}
                | forstmt:s
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Statement");
                    if (s != null) { nPadre.appendChild(s); }                 
                    RESULT = nPadre;
                :}
                | whilestmt:s
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Statement");
                    if (s != null) { nPadre.appendChild(s); }                 
                    RESULT = nPadre;
                :}
                | repeatstmt:s
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Statement");
                    if (s != null) { nPadre.appendChild(s); }                 
                    RESULT = nPadre;
                :}
                | readstmt:s
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Statement");
                    if (s != null) { nPadre.appendChild(s); }                 
                    RESULT = nPadre;
                :}
                | writestmt:s
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Statement");
                    if (s != null) { nPadre.appendChild(s); }                 
                    RESULT = nPadre;
                :}
                | blockstmt:s
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Statement");
                    if (s != null) { nPadre.appendChild(s); }                 
                    RESULT = nPadre;
                :}
                ;

blockstmt       ::= Begin stmts:s End
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Block");
                    if (s != null) { nPadre.appendChild(s); }             
                    RESULT = nPadre;
                :}
                ;

assignstmt      ::= var:i DosPuntosIgual expr:e 
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Assignment");
                    if (i != null) { nPadre.appendChild(i); }
                    if (e != null) { nPadre.appendChild(e); }                   
                    RESULT = nPadre;
                :}
                ;

ifstmt          ::= If expr:e Then stmt:s Else stmt:s2
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("IfStatement");
                    if (e != null) { nPadre.appendChild(e); }         
                    if (s != null) { nPadre.appendChild(s); }
                    if (s2 != null) { nPadre.appendChild(s2); }
                    RESULT = nPadre;
                :}
                |   If expr:e Then stmt:s
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("IfStatement");
                    if (e != null) { nPadre.appendChild(e); }         
                    if (s != null) { nPadre.appendChild(s); }
                    RESULT = nPadre;
                :}
                ;

forstmt         ::= For assignstmt:a To expr:e Do stmts:s
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("ForStatement");
                    if (a != null) { nPadre.appendChild(a); }
                    if (e != null) { nPadre.appendChild(e); }
                    if (s != null) { nPadre.appendChild(s); }
                    RESULT = nPadre;
                :}
                ;

whilestmt       ::= While expr:e Do stmt:s
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("WhileStatement");
                    if (e != null) { nPadre.appendChild(e); }
                    if (s != null) { nPadre.appendChild(s); }
                    RESULT = nPadre;
                :}
                ;

repeatstmt      ::= Repeat stmts:s Until expr:e
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("RepeatStatement");
                    if (s != null) { nPadre.appendChild(s); }
                    if (e != null) { nPadre.appendChild(e); }
                    RESULT = nPadre;
                :}
                ;

writestmt       ::= Write ParentesisAbrir string:s ParentesisCerrar
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("WriteStatement");
                    if (s != null) { nPadre.appendChild(s); }
                    RESULT = nPadre;
                :}
                |   Write ParentesisAbrir string:s Coma var:v ParentesisCerrar
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("WriteStatement");
                    if (s != null) { nPadre.appendChild(s); }
                    if (v != null) { nPadre.appendChild(v); }
                    RESULT = nPadre;
                :}
                ;

readstmt        ::= Read ParentesisAbrir string:s ParentesisCerrar
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("ReadStatement");
                    if (s != null) { nPadre.appendChild(s); }
                    RESULT = nPadre;
                :}
                ;

expr            ::= literal:l 
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Expression");
                    if (l != null) { nPadre.appendChild(l); }                   
                    RESULT = nPadre;
                :}
                |   var:v
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Expression");
                    if (v != null) { nPadre.appendChild(v); }                   
                    RESULT = nPadre;
                :}
                |   var:v ParentesisAbrir exprlist:el ParentesisCerrar
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("FunctionCall");
                    if (v != null) { nPadre.appendChild(v);}
                    if (el != null) { nPadre.appendChild(el);}
                    RESULT = nPadre;
                :}
                |   expr:e1 opRelacion:op expr:e2
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Expression");
                    if (e1 != null) { nPadre.appendChild(e1);}
                    if (op != null) { nPadre.appendChild(op);}
                    if (e2 != null) { nPadre.appendChild(e2);}
                    RESULT = nPadre;
                :}
                |   expr:e1 opArit:op expr:e2
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Expression");
                    if (e1 != null) { nPadre.appendChild(e1);}
                    if (op != null) { nPadre.appendChild(op);}
                    if (e2 != null) { nPadre.appendChild(e2);}
                    RESULT = nPadre;
                :}
                |   opUnario:op expr:e
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Expression");
                    if (op != null) { nPadre.appendChild(op);}
                    if (e != null) { nPadre.appendChild(e);}
                    RESULT = nPadre;
                :}
                |   exprLogical:e
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Expression");
                    if (e != null) { nPadre.appendChild(e);}
                    RESULT = nPadre;
                :}
                ;

exprLogical     ::= ParentesisAbrir expr:e1 ParentesisCerrar exprOpLog:e2
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Expression");
                    if (e1 != null) { nPadre.appendChild(e1);}
                    if (e2 != null) { nPadre.appendChild(e2);}
                    RESULT = nPadre;
                :}
                ;
exprOpLog       ::= /* Empty */
                | opLogico:op exprLogical:e
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Expression");
                    if (op != null) { nPadre.appendChild(op);}
                    if (e != null)  { nPadre.appendChild(e);}
                    RESULT = nPadre;
                :}
                ;

opRelacion      ::= OperadorIgual:op
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("RelationalOp");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                :}
                |   OperadorDiferente:op
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("RelationalOp");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                :}
                |   OperadorMayor:op
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("RelationalOp");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                :}
                |   OperadorMenor:op
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("RelationalOp");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                :}
                |   OperadorMenorIgual:op
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("RelationalOp");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                :}
                |   OperadorMayorIgual:op
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("RelationalOp");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                :}
                ;


opArit          ::= OperadorSuma:op
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("ArithmeticOp");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                :}
                |   OperadorResta:op
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("ArithmeticOp");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                :}
                |   OperadorMultiplicacion:op
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("ArithmeticOp");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                :}
                |   OperadorDivision:op
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("ArithmeticOp");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                :}
                |   OperadorMod:op
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("ArithmeticOp");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                :}
                |   OperadorDivisionSpecial:op
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("ArithmeticOp");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                :}
                ;

opUnario        ::= OperadorNot:op
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("UnaryOp");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                :}
                |   OperadorSuma:op
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("UnaryOp");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                :}
                |   OperadorResta:op
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("UnaryOp");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                :} 
                ;

opLogico        ::= OperadorAnd:op
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("LogicalOp");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                :}
                |   OperadorOr:op
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("LogicalOp");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                :}
                ;

exprlist        ::= expr:e
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("ExprList");
                    if (e != null) { nPadre.appendChild(e);}
                    RESULT = nPadre;
                :}
                |   expr:e Coma exprlist:el
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("ExprList");
                    if (e != null) { nPadre.appendChild(e);}
                    if (el != null) { nPadre.appendChild(el);}
                    RESULT = nPadre;
                :}
                ;

literal         ::= integer:l
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Literal");
                    if (l != null) { nPadre.appendChild(l);}
                    RESULT = nPadre;
                :}
                |   character:c
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Literal");
                    if (c != null) { nPadre.appendChild(c);}
                    RESULT = nPadre;
                :}                
                |   boolean:b
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Literal");
                    if (b != null) { nPadre.appendChild(b);}
                    RESULT = nPadre;
                :}
                |   string:s
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Literal");
                    if (s != null) { nPadre.appendChild(s);}
                    RESULT = nPadre;
                :}
                ;

integer         ::= LiteralEntero:i 
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Integer");
                    nPadre.setAttribute("Value",i.toString());
                    RESULT = nPadre;
                :}
                ;

character       ::= LiteralCaracter:c
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Character");
                    nPadre.setAttribute("Value",c.toString());            
                    RESULT = nPadre;
                :}
                ;

boolean         ::= LiteralBoolean:b
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Boolean");
                    nPadre.setAttribute("Value",b);          
                    RESULT = nPadre;
                :}
                ;

string          ::= LiteralString:s
                {:
                    iniXML();
                    Element nPadre = xmlDocument.createElement("String");
                    nPadre.setAttribute("Value",s);
                    RESULT = nPadre;
                :}
                ;