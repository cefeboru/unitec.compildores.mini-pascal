/* Simple +/-/* expression language; parser evaluates constant expressions on the fly*/
import java_cup.runtime.*;
import java.io.BufferedReader;
import java.io.FileReader;


parser code {:
    // Connect this parser to a scanner!
    PascalFlexer s;
    Parser(PascalFlexer s){ this.s=s; }
:}

/* define how to connect to the scanner! */
init with {: 
        BufferedReader br = new BufferedReader(new FileReader("src/main/resources/input.txt")); 
        s = new PascalFlexer(br);
    :};
scan with {: return s.next_token(); :};

/* Terminals (tokens returned by the scanner). */
terminal            Array, Begin, BracketAbrir, BracketCerrar, Caracter, CaracterSubrayado, Coma, ComillaSimple, Digito, DosPuntos, 
                    DosPuntosIgual, End, Punto, OperadorIgual, Identificador, LetraMayuscula, LetraMinuscula, Letra, LineTerminator, 
                    LiteralBoolean, LiteralCaracter, LiteralString, LlaveAbrir, LlaveCerrar, Of, ParentesisAbrir, 
                    ParentesisCerrar, Programa, PuntoComa, PuntoPunto, Tipo, TipoChar, TipoInteger, TipoString, TipoBoolean, Var, 
                    WhiteSpace, Write, WriteLn, Read, OperadorDiferente, OperadorMayor, OperadorMenor, OperadorMayorIgual, OperadorMenorIgual, 
                    OperadorAnd, OperadorOr, OperadorNot, OperadorMas, OperadorMenos, OperadorSuma, OperadorMultiplicacion;
terminal Integer    LiteralEntero;

/* Non terminals */
non terminal            expr_list;
non terminal Integer    expr;      // used to store evaluated subexpressions

/* Precedences 
precedence left PLUS, MINUS;
precedence left TIMES;
precedence left UMINUS;
*/

/* The grammar rules 
expr_list ::= expr_list expr:e SEMI         {: System.out.println(e);:}
            | expr:e SEMI                   {: System.out.println(e);:}
;
expr      ::= expr:e1 PLUS  expr:e2         {: RESULT = e1+e2;       :}
             | expr:e1 MINUS expr:e2        {: RESULT = e1-e2;       :}
             | expr:e1 TIMES expr:e2        {: RESULT = e1*e2;       :}
             | MINUS expr:e                 {: RESULT = -e;          :}
  	     %prec UMINUS
       | LPAREN expr:e RPAREN	         {: RESULT = e;           :}
       | NUMBER:n	                     {: RESULT = n;           :}
             ;
*/