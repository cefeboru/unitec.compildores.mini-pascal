import java_cup.runtime.*;

/* Terminals (tokens returned by the scanner). */
//Funciones
terminal Write;
terminal WriteLn;
terminal Read;

//Tipos de datos
terminal Array;
terminal Of;
terminal Tipo;
terminal Var;
terminal TipoBoolean;
terminal TipoChar;
terminal TipoInteger;
terminal TipoString;

//Operadores
terminal OperadorIgual;
terminal OperadorDiferente;
terminal OperadorMayor;
terminal OperadorMenor;
terminal OperadorMayorIgual;
terminal OperadorMenorIgual;
terminal OperadorAnd;
terminal OperadorOr;
terminal OperadorNot;
terminal OperadorSuma;
terminal OperadorResta;
terminal OperadorMultiplicacion;
terminal OperadorMod;
terminal OperadorDivision;
terminal OperadorDivisionSpecial;

//Estructuras de control
terminal If;
terminal Then;
terminal Else;
terminal ElseIf;
terminal Begin;
terminal End;
terminal For;
terminal To;
terminal Do;
terminal While;
terminal Until;

//Otros
terminal BracketAbrir;
terminal BracketCerrar;
terminal ComillaSimple;
terminal ComillaDentro;
terminal Coma;
terminal Digito;
terminal DosPuntos;
terminal DosPuntosIgual;
terminal Identificador;
terminal Letra;
terminal LineTerminator;
terminal LlaveAbrir;
terminal LlaveCerrar;
terminal ParentesisAbrir;
terminal ParentesisCerrar;
terminal Program;
terminal Procedure;
terminal Function;
terminal Punto;
terminal PuntoComa;
terminal PuntoPunto;
terminal WhiteSpace;

/*Literales*/
terminal java.lang.Number       LiteralEntero;
terminal java.lang.Character    LiteralCaracter;
terminal java.lang.Boolean      LiteralBoolean;
terminal java.lang.String       LiteralString;

/* Non terminals */
nonterminal             expr_list;
nonterminal Integer     expr;      // used to store evaluated subexpressions
nonterminal             literal;
nonterminal             program;
nonterminal             block;
nonterminal             identifier;
nonterminal             decls;
nonterminal             decl;
nonterminal             typedecl;
nonterminal             vardecl;
nonterminal             procdecl;
nonterminal             type;
nonterminal             identtype;
nonterminal             arraytype;
nonterminal             arrayidenttype;
nonterminal             vars;
nonterminal             var;

nonterminal             exprlist;
nonterminal             stmts;
nonterminal             stmt;
nonterminal             assmntstmt;
nonterminal             ifstmt;
nonterminal             ifstmtelse;
nonterminal             proccallstmt;
nonterminal             compoundstmt;

nonterminal             relop;
nonterminal             addop;
nonterminal             multop;
nonterminal             unyop;

nonterminal             integer;
nonterminal             character;
nonterminal             boolean;
nonterminal             string;


nonterminal designator;


program         ::= Program Identificador:i PuntoComa block:b Punto
                ;

block           ::= decls:d Begin stmts:s End
                        {:  :}
                ;

decls           ::= /* empty */
                        {: RESULT = null; :}
                | decl:d
                        {:  :}
                | decl:d PuntoComa decls:ds
                        {:  :}
                ;

decl            ::= vardecl:vd
                |   procdecl:pd
                ;

type            ::= identtype:it
                | arraytype:ats
                ;

identtype       ::= TipoChar
                |   TipoString
                |   TipoBoolean
                |   TipoInteger
                ;

arrayidenttype  ::= TipoChar
                |   TipoBoolean
                |   TipoInteger
                ;

arraytype       ::= Array BracketAbrir integer:i BracketCerrar Of arrayidenttype:t
                        {:  :}
                ;

vardecl         ::= Var vars:vs DosPuntos type:t
                        {:  :}
                ;

vars            ::= var:v
                        {:  :}
                | var:v Coma vars:vs
                        {:  :}
                ;

var             ::= Identificador:i
                    {: :}
                ;

integer         ::= LiteralEntero:i 
                    {:  :}
                ;


character       ::= LiteralCaracter:c
                    {:  :}
                ;

boolean         ::= LiteralBoolean:b
                    {:  :}
                ;

string          ::= LiteralString:s
                    {:  :}
                ;