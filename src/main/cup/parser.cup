import java_cup.runtime.*;

/* Terminals (tokens returned by the scanner). */
//Funciones
terminal Write;
terminal WriteLn;
terminal Read;

//Tipos de datos
terminal Array;
terminal Of;
terminal Tipo;
terminal Var;
terminal TipoBoolean;
terminal TipoChar;
terminal TipoInteger;
terminal TipoString;

//Operadores
terminal OperadorIgual;
terminal OperadorDiferente;
terminal OperadorMayor;
terminal OperadorMenor;
terminal OperadorMayorIgual;
terminal OperadorMenorIgual;
terminal OperadorAnd;
terminal OperadorOr;
terminal OperadorNot;
terminal OperadorSuma;
terminal OperadorResta;
terminal OperadorMultiplicacion;
terminal OperadorMod;
terminal OperadorDivision;
terminal OperadorDivisionSpecial;

//Estructuras de control
terminal If;
terminal Then;
terminal Else;
terminal ElseIf;
terminal Begin;
terminal End;
terminal For;
terminal To;
terminal Do;
terminal While;
terminal Until;

//Otros
terminal BracketAbrir;
terminal BracketCerrar;
terminal ComillaSimple;
terminal ComillaDentro;
terminal Coma;
terminal Digito;
terminal DosPuntos;
terminal DosPuntosIgual;
terminal Identificador;
terminal Letra;
terminal LineTerminator;
terminal LlaveAbrir;
terminal LlaveCerrar;
terminal ParentesisAbrir;
terminal ParentesisCerrar;
terminal Program;
terminal Procedure;
terminal Function;
terminal Punto;
terminal PuntoComa;
terminal PuntoPunto;
terminal WhiteSpace;

/*Literales*/
terminal java.lang.Number       LiteralEntero;
terminal java.lang.Character    LiteralCaracter;
terminal java.lang.Boolean      LiteralBoolean;
terminal java.lang.String       LiteralString;

/* Non terminals */
nonterminal             expr_list;
nonterminal Integer     expr;      // used to store evaluated subexpressions
nonterminal             literal;
nonterminal             program;
nonterminal             block;
nonterminal             blockProc;
nonterminal             identifier;
nonterminal             decls;
nonterminal             decl;
nonterminal             typedecl;
nonterminal             vardecls;
nonterminal             vardecl;
nonterminal             procdecls;
nonterminal             procdecl;

nonterminal             functionDecl;
nonterminal             inlineArgs;
nonterminal             inlineArg;
nonterminal             procedureDecl;
nonterminal             procInlineDecls;
nonterminal             procInlineDecl;

nonterminal             type;
nonterminal             identtype;
nonterminal             arraytype;
nonterminal             arrayidenttype;
nonterminal             vars;
nonterminal             var;
nonterminal             expresions;

nonterminal             exprlist;
nonterminal             opRelacion;
nonterminal             stmts;
nonterminal             stmt;
nonterminal             assignstmt;
nonterminal             ifstmt;
nonterminal             ifstmtelse;

nonterminal             integer;
nonterminal             character;
nonterminal             boolean;
nonterminal             string;


nonterminal designator;


program         ::= Program Identificador:i PuntoComa block:b Punto
                ;

block           ::= decls:d Begin stmts:s End
                        {:  :}
                ;

blockProc       ::= procInlineDecls Begin stmts:s End
                ;

decls           ::= /* empty */
                |   decl:d decls:ds
                ;

decl            ::= Var vardecls:vd
                |   functionDecl
                |   procedureDecl
                ;

functionDecl    ::= Function Identificador:i ParentesisAbrir inlineArgs ParentesisCerrar DosPuntos type PuntoComa blockProc:b PuntoComa
                |   Function Identificador:i ParentesisAbrir ParentesisCerrar DosPuntos type PuntoComa blockProc:b PuntoComa
                ;

procedureDecl   ::= Procedure Identificador:i ParentesisAbrir inlineArgs ParentesisCerrar PuntoComa blockProc:b PuntoComa
                |   Procedure Identificador:i ParentesisAbrir ParentesisCerrar PuntoComa blockProc:b PuntoComa
                ;

procInlineDecls  ::= 
                |   procInlineDecl procInlineDecls
                ;

procInlineDecl  ::= Var vardecls:vd
                ;


inlineArgs      ::= inlineArg
                |   inlineArg PuntoComa inlineArgs
                ;

inlineArg       ::= Var vars:vs DosPuntos identtype
                |       vars:vs DosPuntos identtype 
                ;

vardecls        ::= /* Empty */
                |  vardecl PuntoComa vardecls
                ;

vardecl         ::= vars:vs DosPuntos type:t
                ;

vars            ::= var:v
                        {:  :}
                |   var:v Coma vars:vs
                        {:  :}
                ;

var             ::= Identificador:i
                    {: :}
                ;

type            ::= identtype:it
                |   arraytype:ats
                ;

identtype       ::= TipoChar
                |   TipoString
                |   TipoBoolean
                |   TipoInteger
                ;

arrayidenttype  ::= TipoChar
                |   TipoBoolean
                |   TipoInteger
                ;

arraytype       ::= Array BracketAbrir integer:i BracketCerrar Of arrayidenttype:t
                        {:  :}
                ;

stmts           ::= stmt:s
                        {: :}
                | stmt:s PuntoComa stmts:ss
                        {: :}
                ;

stmt            ::= /* empty */
                        {: :}
                | assignstmt:as
                        {: :}
                | ifstmt:is
                        {: :}
                ;

assignstmt      ::= Identificador:i DosPuntosIgual expr:e
                ;

expr            ::= integer
                |   character
                |   boolean
                |   string
                |   var:v ParentesisAbrir exprlist:el ParentesisCerrar
                |   expr opRelacion:op expr
                ;

opRelacion      ::= OperadorIgual
                |   OperadorDiferente
                |   OperadorMayor
                |   OperadorMenor
                |   OperadorMenorIgual
                |   OperadorMayorIgual
                ;

exprlist        ::= expr
                |   expr Coma exprlist
                ;

integer         ::= LiteralEntero:i 
                    {: :}
                ;

character       ::= LiteralCaracter:c
                    {:  :}
                ;

boolean         ::= LiteralBoolean:b
                    {:  :}
                ;

string          ::= LiteralString:s
                    {:  :}
                ;