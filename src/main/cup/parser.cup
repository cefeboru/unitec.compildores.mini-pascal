import java_cup.runtime.*;
import java.io.BufferedReader;
import java.io.FileReader;


parser code {:
    // Connect this parser to a scanner!
    PascalFlexer s;
    Parser(PascalFlexer s){ this.s=s; }
:}

/* define how to connect to the scanner! */
init with {: 
        BufferedReader br = new BufferedReader(new FileReader("src/main/resources/input.txt")); 
        s = new PascalFlexer(br);
    :};
scan with {: return s.next_token(); :};

/* Terminals (tokens returned by the scanner). */

//Funciones
terminal Write;
terminal WriteLn;
terminal Read;

//Tipos de datos
terminal Array;
terminal Of;
terminal Tipo;
terminal Var;
terminal TipoBoolean;
terminal TipoChar;
terminal TipoInteger;
terminal TipoString;

//Operadores
terminal OperadorIgual;
terminal OperadorDiferente;
terminal OperadorMayor;
terminal OperadorMenor;
terminal OperadorMayorIgual;
terminal OperadorMenorIgual;
terminal OperadorAnd;
terminal OperadorOr;
terminal OperadorNot;
terminal OperadorSuma;
terminal OperadorMultiplicacion;

//Estructuras de control
terminal If;
terminal Then;
terminal Else;
terminal ElseIf;
terminal Begin;
terminal End;
terminal For;
terminal To;
terminal Do;
terminal While;
terminal Until;

//Otros
terminal Programa;
terminal Identificador;
terminal PuntoComa;
terminal PuntoPunto;
terminal WhiteSpace;
terminal LineTerminator;
terminal ParentesisAbrir;
terminal ParentesisCerrar;
terminal LlaveAbrir;
terminal LlaveCerrar;
terminal BracketAbrir;
terminal BracketCerrar;
terminal ComillaSimple;
terminal ComillaDentro;
terminal Coma;
terminal Letra;
terminal Digito;
terminal DosPuntos;
terminal DosPuntosIgual;
terminal Punto;

/*Literales*/
terminal java.lang.Number       LiteralEntero;
terminal java.lang.Character    LiteralCaracter;
terminal java.lang.Boolean      LiteralBoolean;
terminal java.lang.String       LiteralString;

/* Non terminals */
non terminal            expr_list;
non terminal Integer    expr;      // used to store evaluated subexpressions
non terminal            literal;

literal ::=
		LiteralEntero   {:  :}
	|	LiteralString   {:  :}
	|	LiteralBoolean  {:  :}
	|	LiteralCaracter {:  :}
	;