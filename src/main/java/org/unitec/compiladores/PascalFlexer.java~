/* The following code was generated by JFlex 1.6.1 */

package org.unitec.compiladores;

import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/elco45/Desktop/unitec.compildores.mini-pascal/src/main/jflex/mini-pascal.flex</tt>
 */
public class PascalFlexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;
  private static final String ZZ_NL = System.getProperty("line.separator");

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;
  public static final int COMILLA_SIMPLE = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\50\1\52\1\57\1\60\1\51\22\0\1\50\6\0\1\42"+
    "\1\7\1\11\1\14\1\45\1\10\1\46\1\34\1\47\12\56\1\33"+
    "\1\23\1\43\1\24\1\44\2\0\1\5\1\37\1\35\1\31\1\22"+
    "\1\20\1\4\1\36\1\54\2\53\1\27\1\6\1\30\1\3\1\1"+
    "\1\53\1\2\1\55\1\21\1\41\1\32\1\25\1\53\1\15\1\53"+
    "\1\16\1\0\1\17\1\0\1\53\1\0\1\5\1\37\1\35\1\31"+
    "\1\22\1\20\1\4\1\36\1\54\2\53\1\27\1\6\1\30\1\3"+
    "\1\1\1\53\1\2\1\55\1\21\1\41\1\32\1\25\1\53\1\15"+
    "\1\53\1\12\1\0\1\13\7\0\1\57\252\0\2\26\115\0\1\40"+
    "\u1ea8\0\1\57\1\57\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\6\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\3\2\1\13\1\14\1\2\1\1"+
    "\3\2\1\15\1\16\2\2\1\1\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\2\25\2\2\1\26\1\27\1\30"+
    "\1\31\2\2\1\32\1\33\13\2\1\34\1\0\1\2"+
    "\1\0\2\2\1\35\3\2\3\0\1\36\1\37\1\40"+
    "\1\34\5\2\1\41\1\42\5\2\1\0\1\2\1\43"+
    "\1\0\1\2\1\0\1\44\2\45\1\46\3\2\1\0"+
    "\1\47\4\2\1\50\1\2\1\0\1\2\1\51\1\52"+
    "\1\53\2\54\1\0\1\2\1\0\1\55\1\2\1\0"+
    "\1\2\1\0\4\2\1\56\1\51\1\2\2\57\1\0"+
    "\1\2\2\60\1\0\4\2\1\0\1\2\1\0\1\2"+
    "\1\0\1\2\1\61\1\2\1\61\1\62\1\2\1\0"+
    "\1\2\2\63\1\64\1\65\1\64\1\2\2\66\1\67";

  private static int [] zzUnpackAction() {
    int [] result = new int[167];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\304\0\365\0\u0126\0\u0157"+
    "\0\u0188\0\u01b9\0\223\0\223\0\223\0\223\0\223\0\223"+
    "\0\223\0\223\0\u01ea\0\u021b\0\u024c\0\223\0\223\0\u027d"+
    "\0\u02ae\0\u02df\0\u0310\0\u0341\0\u0372\0\223\0\u03a3\0\u03d4"+
    "\0\u0405\0\u0436\0\u0467\0\u0498\0\223\0\223\0\223\0\223"+
    "\0\u04c9\0\u04fa\0\u052b\0\u055c\0\223\0\223\0\223\0\u058d"+
    "\0\u05be\0\u0157\0\u0157\0\u05ef\0\u0620\0\u0651\0\u0682\0\u06b3"+
    "\0\u06e4\0\u0715\0\u0746\0\u0777\0\u07a8\0\u07d9\0\223\0\u080a"+
    "\0\u083b\0\u086c\0\u089d\0\u08ce\0\223\0\u08ff\0\u0930\0\u0961"+
    "\0\u0992\0\u09c3\0\u09f4\0\223\0\223\0\223\0\u0157\0\u0a25"+
    "\0\u0a56\0\u0a87\0\u0ab8\0\u0ae9\0\u0157\0\u0157\0\u0b1a\0\u0b4b"+
    "\0\u0b7c\0\u0bad\0\u0bde\0\u0c0f\0\u0c40\0\u0157\0\u0c71\0\u0ca2"+
    "\0\u0cd3\0\u0157\0\223\0\u0157\0\u0157\0\u0d04\0\u0d35\0\u0d66"+
    "\0\u0d97\0\223\0\u0dc8\0\u0df9\0\u0e2a\0\u0e5b\0\u0157\0\u0e8c"+
    "\0\u0ebd\0\u0eee\0\u0157\0\u0157\0\u0157\0\223\0\u0157\0\u0f1f"+
    "\0\u0f50\0\u0f81\0\u0157\0\u0fb2\0\u0fe3\0\u1014\0\u1045\0\u1076"+
    "\0\u10a7\0\u10d8\0\u1109\0\u0157\0\223\0\u113a\0\u116b\0\u119c"+
    "\0\u11cd\0\u11fe\0\223\0\u0157\0\u122f\0\u1260\0\u1291\0\u12c2"+
    "\0\u12f3\0\u1324\0\u1355\0\u1386\0\u13b7\0\u13e8\0\u1419\0\223"+
    "\0\u144a\0\u0157\0\u0157\0\u147b\0\u14ac\0\u14dd\0\223\0\u0157"+
    "\0\223\0\u0157\0\u0157\0\u150e\0\223\0\u0157\0\u0157";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[167];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\10\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\10"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\10\1\40"+
    "\1\41\1\10\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\50\1\10\1\52\1\53\1\54\1\0"+
    "\14\50\1\55\35\50\2\0\4\50\2\0\42\56\1\57"+
    "\6\56\2\0\4\56\64\0\1\10\1\60\4\10\6\0"+
    "\1\10\2\0\3\10\2\0\1\10\1\0\4\10\2\0"+
    "\3\10\1\0\1\10\11\0\4\10\3\0\6\10\6\0"+
    "\1\10\2\0\2\10\1\61\2\0\1\10\1\0\4\10"+
    "\2\0\3\10\1\0\1\10\11\0\4\10\3\0\1\10"+
    "\1\62\4\10\6\0\1\10\2\0\1\63\2\10\2\0"+
    "\1\10\1\0\4\10\2\0\3\10\1\0\1\10\11\0"+
    "\4\10\3\0\6\10\6\0\1\10\2\0\3\10\2\0"+
    "\1\10\1\0\4\10\2\0\3\10\1\0\1\10\11\0"+
    "\4\10\3\0\1\10\1\64\4\10\6\0\1\10\2\0"+
    "\3\10\2\0\1\10\1\0\1\10\1\65\2\10\2\0"+
    "\3\10\1\0\1\10\11\0\4\10\3\0\2\10\1\66"+
    "\3\10\6\0\1\10\2\0\3\10\2\0\1\10\1\0"+
    "\4\10\2\0\3\10\1\0\1\10\11\0\4\10\3\0"+
    "\4\10\1\67\1\10\6\0\1\10\2\0\3\10\2\0"+
    "\1\10\1\0\4\10\2\0\3\10\1\0\1\70\11\0"+
    "\4\10\3\0\1\10\1\71\4\10\6\0\1\72\2\0"+
    "\3\10\2\0\1\10\1\0\4\10\2\0\1\10\1\73"+
    "\1\10\1\0\1\10\11\0\4\10\3\0\6\10\6\0"+
    "\1\10\2\0\3\10\2\0\1\10\1\0\1\74\1\75"+
    "\2\10\2\0\3\10\1\0\1\10\11\0\4\10\3\0"+
    "\1\10\1\76\4\10\6\0\1\10\2\0\3\10\2\0"+
    "\1\10\1\0\4\10\2\0\3\10\1\0\1\10\11\0"+
    "\4\10\22\0\1\77\7\0\1\100\31\0\2\10\1\101"+
    "\3\10\6\0\1\10\2\0\3\10\2\0\1\10\1\0"+
    "\4\10\2\0\3\10\1\0\1\10\11\0\4\10\3\0"+
    "\6\10\6\0\1\10\2\0\3\10\2\0\1\10\1\102"+
    "\4\10\2\0\3\10\1\0\1\10\11\0\1\10\1\103"+
    "\2\10\3\0\4\10\1\104\1\10\6\0\1\10\2\0"+
    "\3\10\2\0\1\10\1\0\4\10\2\0\3\10\1\0"+
    "\1\10\11\0\4\10\26\0\1\105\35\0\6\10\6\0"+
    "\1\10\2\0\3\10\2\0\1\10\1\0\4\10\2\0"+
    "\1\10\1\106\1\10\1\0\1\10\11\0\4\10\3\0"+
    "\2\10\1\107\3\10\6\0\1\10\2\0\2\10\1\110"+
    "\2\0\1\10\1\0\4\10\2\0\3\10\1\0\1\10"+
    "\11\0\4\10\23\0\1\111\37\0\1\112\6\113\6\112"+
    "\1\113\2\112\3\113\2\112\1\113\1\112\4\113\2\112"+
    "\3\113\1\112\1\113\1\114\10\112\3\113\3\112\24\0"+
    "\1\115\60\0\1\116\106\0\1\50\7\0\6\10\6\0"+
    "\1\10\2\0\1\117\2\10\2\0\1\10\1\0\1\10"+
    "\1\120\2\10\2\0\3\10\1\0\1\10\11\0\4\10"+
    "\3\0\6\10\6\0\1\10\2\0\1\10\1\121\1\10"+
    "\2\0\1\10\1\0\4\10\2\0\3\10\1\0\1\10"+
    "\11\0\4\10\60\0\1\54\3\0\2\10\1\122\3\10"+
    "\6\0\1\10\2\0\3\10\2\0\1\10\1\0\4\10"+
    "\2\0\3\10\1\0\1\10\11\0\4\10\3\0\4\10"+
    "\1\123\1\10\6\0\1\10\2\0\3\10\2\0\1\10"+
    "\1\0\4\10\2\0\3\10\1\0\1\10\11\0\4\10"+
    "\3\0\1\10\1\124\4\10\6\0\1\10\2\0\3\10"+
    "\2\0\1\10\1\0\4\10\2\0\3\10\1\0\1\10"+
    "\11\0\4\10\3\0\6\10\6\0\1\10\2\0\3\10"+
    "\2\0\1\10\1\0\2\10\1\125\1\10\2\0\3\10"+
    "\1\0\1\10\11\0\4\10\3\0\6\10\6\0\1\10"+
    "\2\0\3\10\2\0\1\10\1\0\2\10\1\126\1\10"+
    "\2\0\3\10\1\0\1\10\11\0\4\10\3\0\6\10"+
    "\6\0\1\10\2\0\3\10\2\0\1\10\1\0\1\127"+
    "\3\10\2\0\3\10\1\0\1\10\11\0\4\10\3\0"+
    "\6\10\6\0\1\10\2\0\3\10\2\0\1\10\1\0"+
    "\1\10\1\130\2\10\2\0\3\10\1\0\1\10\11\0"+
    "\4\10\3\0\6\10\6\0\1\10\2\0\3\10\2\0"+
    "\1\10\1\0\4\10\2\0\3\10\1\0\1\131\11\0"+
    "\4\10\3\0\1\132\5\10\6\0\1\10\2\0\3\10"+
    "\2\0\1\10\1\0\4\10\2\0\3\10\1\0\1\10"+
    "\11\0\4\10\3\0\6\10\6\0\1\10\2\0\2\10"+
    "\1\133\2\0\1\10\1\0\4\10\2\0\3\10\1\0"+
    "\1\10\11\0\4\10\3\0\6\10\6\0\1\10\2\0"+
    "\3\10\2\0\1\10\1\0\4\10\2\0\3\10\1\134"+
    "\1\10\11\0\2\10\1\135\1\10\3\0\6\10\6\0"+
    "\1\10\2\0\3\10\2\0\1\10\1\0\2\10\1\136"+
    "\1\10\2\0\3\10\1\0\1\10\11\0\4\10\3\0"+
    "\6\10\6\0\1\10\2\0\3\10\2\0\1\10\1\137"+
    "\4\10\2\0\3\10\1\0\1\10\11\0\1\10\1\140"+
    "\2\10\23\0\1\141\40\0\6\10\6\0\1\10\2\0"+
    "\1\10\1\142\1\10\2\0\1\10\1\0\4\10\2\0"+
    "\3\10\1\0\1\10\11\0\4\10\34\0\1\143\27\0"+
    "\6\10\6\0\1\10\2\0\3\10\2\0\1\10\1\0"+
    "\3\10\1\144\2\0\3\10\1\0\1\10\11\0\4\10"+
    "\3\0\1\10\1\145\4\10\6\0\1\10\2\0\3\10"+
    "\2\0\1\10\1\0\4\10\2\0\3\10\1\0\1\10"+
    "\11\0\4\10\3\0\4\10\1\146\1\10\6\0\1\10"+
    "\2\0\3\10\2\0\1\10\1\0\4\10\2\0\3\10"+
    "\1\0\1\10\11\0\4\10\3\0\2\10\1\147\3\10"+
    "\6\0\1\10\2\0\3\10\2\0\1\10\1\0\4\10"+
    "\2\0\3\10\1\0\1\10\11\0\4\10\3\0\3\10"+
    "\1\150\2\10\6\0\1\10\2\0\3\10\2\0\1\10"+
    "\1\0\4\10\2\0\3\10\1\0\1\10\11\0\4\10"+
    "\4\0\1\151\56\0\42\112\1\114\60\112\1\152\16\112"+
    "\1\0\6\10\6\0\1\10\2\0\1\10\1\153\1\10"+
    "\2\0\1\10\1\0\4\10\2\0\3\10\1\0\1\10"+
    "\11\0\4\10\3\0\1\10\1\154\4\10\6\0\1\10"+
    "\2\0\3\10\2\0\1\10\1\0\4\10\2\0\3\10"+
    "\1\0\1\10\11\0\4\10\3\0\3\10\1\155\2\10"+
    "\6\0\1\10\2\0\3\10\2\0\1\10\1\0\4\10"+
    "\2\0\1\156\2\10\1\0\1\10\11\0\4\10\3\0"+
    "\6\10\6\0\1\10\2\0\3\10\2\0\1\10\1\0"+
    "\2\10\1\157\1\10\2\0\3\10\1\0\1\10\11\0"+
    "\4\10\3\0\4\10\1\160\1\10\6\0\1\10\2\0"+
    "\3\10\2\0\1\10\1\0\4\10\2\0\3\10\1\0"+
    "\1\10\11\0\4\10\3\0\6\10\6\0\1\10\2\0"+
    "\3\10\2\0\1\10\1\0\4\10\2\0\3\10\1\161"+
    "\1\10\11\0\2\10\1\131\1\10\3\0\6\10\6\0"+
    "\1\10\2\0\3\10\2\0\1\10\1\0\4\10\2\0"+
    "\1\162\2\10\1\0\1\10\11\0\4\10\3\0\6\10"+
    "\6\0\1\10\2\0\2\10\1\163\2\0\1\10\1\0"+
    "\4\10\2\0\3\10\1\0\1\10\11\0\4\10\3\0"+
    "\6\10\6\0\1\10\2\0\2\10\1\164\2\0\1\10"+
    "\1\0\4\10\2\0\3\10\1\0\1\10\11\0\4\10"+
    "\3\0\6\10\6\0\1\10\2\0\3\10\2\0\1\10"+
    "\1\0\1\10\1\165\2\10\2\0\3\10\1\0\1\10"+
    "\11\0\4\10\24\0\1\166\37\0\6\10\6\0\1\10"+
    "\2\0\2\10\1\167\2\0\1\10\1\0\4\10\2\0"+
    "\3\10\1\0\1\10\11\0\4\10\23\0\1\170\40\0"+
    "\6\10\6\0\1\10\2\0\1\10\1\171\1\10\2\0"+
    "\1\10\1\0\4\10\2\0\3\10\1\0\1\10\11\0"+
    "\4\10\24\0\1\172\37\0\1\10\1\173\4\10\6\0"+
    "\1\10\2\0\3\10\2\0\1\10\1\0\4\10\2\0"+
    "\3\10\1\0\1\10\11\0\4\10\3\0\6\10\6\0"+
    "\1\10\2\0\3\10\2\0\1\10\1\0\1\174\3\10"+
    "\2\0\3\10\1\0\1\10\11\0\4\10\3\0\6\10"+
    "\6\0\1\10\2\0\3\10\2\0\1\10\1\175\4\10"+
    "\2\0\3\10\1\0\1\10\11\0\1\10\1\176\2\10"+
    "\30\0\1\177\25\0\1\177\5\0\6\10\6\0\1\10"+
    "\2\0\2\10\1\200\2\0\1\10\1\0\4\10\2\0"+
    "\3\10\1\0\1\10\11\0\4\10\3\0\6\10\6\0"+
    "\1\10\2\0\3\10\2\0\1\10\1\177\4\10\2\0"+
    "\3\10\1\0\1\10\11\0\1\10\1\201\2\10\3\0"+
    "\1\10\1\202\4\10\6\0\1\10\2\0\3\10\2\0"+
    "\1\10\1\0\4\10\2\0\3\10\1\0\1\10\11\0"+
    "\4\10\3\0\6\10\6\0\1\10\2\0\2\10\1\203"+
    "\2\0\1\10\1\0\4\10\2\0\3\10\1\0\1\10"+
    "\11\0\4\10\3\0\6\10\6\0\1\204\2\0\3\10"+
    "\2\0\1\10\1\0\4\10\2\0\3\10\1\0\1\10"+
    "\11\0\4\10\24\0\1\205\37\0\6\10\6\0\1\10"+
    "\2\0\1\10\1\206\1\10\2\0\1\10\1\0\4\10"+
    "\2\0\3\10\1\0\1\10\11\0\4\10\24\0\1\207"+
    "\37\0\6\10\6\0\1\10\2\0\2\10\1\210\2\0"+
    "\1\10\1\0\4\10\2\0\3\10\1\0\1\10\11\0"+
    "\4\10\6\0\1\211\55\0\6\10\6\0\1\10\2\0"+
    "\2\10\1\212\2\0\1\10\1\0\4\10\2\0\3\10"+
    "\1\0\1\10\11\0\4\10\32\0\1\213\31\0\6\10"+
    "\6\0\1\10\2\0\3\10\2\0\1\10\1\0\1\10"+
    "\1\214\2\10\2\0\3\10\1\0\1\10\11\0\4\10"+
    "\32\0\1\215\31\0\3\10\1\216\2\10\6\0\1\10"+
    "\2\0\3\10\2\0\1\10\1\0\4\10\2\0\3\10"+
    "\1\0\1\10\11\0\4\10\3\0\6\10\6\0\1\10"+
    "\2\0\3\10\2\0\1\10\1\0\1\10\1\217\2\10"+
    "\2\0\3\10\1\0\1\10\11\0\4\10\3\0\4\10"+
    "\1\220\1\10\6\0\1\10\2\0\3\10\2\0\1\10"+
    "\1\0\4\10\2\0\3\10\1\0\1\10\11\0\4\10"+
    "\3\0\6\10\6\0\1\10\2\0\3\10\2\0\1\10"+
    "\1\0\2\10\1\221\1\10\2\0\3\10\1\0\1\10"+
    "\11\0\4\10\3\0\6\10\6\0\1\10\2\0\3\10"+
    "\2\0\1\10\1\222\4\10\2\0\3\10\1\0\1\10"+
    "\11\0\1\10\1\223\2\10\31\0\1\224\32\0\6\10"+
    "\6\0\1\10\2\0\3\10\2\0\1\10\1\0\1\225"+
    "\3\10\2\0\3\10\1\0\1\10\11\0\4\10\24\0"+
    "\1\226\37\0\4\10\1\227\1\10\6\0\1\10\2\0"+
    "\3\10\2\0\1\10\1\0\4\10\2\0\3\10\1\0"+
    "\1\10\11\0\4\10\6\0\1\230\55\0\6\10\6\0"+
    "\1\10\2\0\2\10\1\231\2\0\1\10\1\0\4\10"+
    "\2\0\3\10\1\0\1\10\11\0\4\10\3\0\3\10"+
    "\1\232\2\10\6\0\1\10\2\0\3\10\2\0\1\10"+
    "\1\0\4\10\2\0\3\10\1\0\1\10\11\0\4\10"+
    "\3\0\5\10\1\233\6\0\1\10\2\0\3\10\2\0"+
    "\1\10\1\0\4\10\2\0\3\10\1\0\1\10\11\0"+
    "\4\10\3\0\6\10\6\0\1\10\2\0\3\10\2\0"+
    "\1\10\1\0\4\10\2\0\3\10\1\0\1\234\11\0"+
    "\4\10\5\0\1\235\56\0\2\10\1\236\3\10\6\0"+
    "\1\10\2\0\3\10\2\0\1\10\1\0\4\10\2\0"+
    "\3\10\1\0\1\10\11\0\4\10\32\0\1\237\31\0"+
    "\6\10\6\0\1\10\2\0\3\10\2\0\1\10\1\0"+
    "\1\10\1\240\2\10\2\0\3\10\1\0\1\10\11\0"+
    "\4\10\4\0\1\241\57\0\6\10\6\0\1\10\2\0"+
    "\3\10\2\0\1\10\1\0\1\10\1\242\2\10\2\0"+
    "\3\10\1\0\1\10\11\0\4\10\3\0\1\10\1\243"+
    "\4\10\6\0\1\10\2\0\3\10\2\0\1\10\1\0"+
    "\4\10\2\0\3\10\1\0\1\10\11\0\4\10\3\0"+
    "\1\10\1\244\4\10\6\0\1\10\2\0\3\10\2\0"+
    "\1\10\1\0\4\10\2\0\3\10\1\0\1\10\11\0"+
    "\4\10\32\0\1\245\31\0\6\10\6\0\1\10\2\0"+
    "\3\10\2\0\1\10\1\0\1\10\1\246\2\10\2\0"+
    "\3\10\1\0\1\10\11\0\4\10\3\0\6\10\6\0"+
    "\1\10\2\0\2\10\1\247\2\0\1\10\1\0\4\10"+
    "\2\0\3\10\1\0\1\10\11\0\4\10\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5439];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\6\1\10\11\3\1\2\11\6\1\1\11"+
    "\6\1\4\11\4\1\3\11\17\1\1\11\1\0\1\1"+
    "\1\0\2\1\1\11\3\1\3\0\3\11\15\1\1\0"+
    "\2\1\1\0\1\1\1\0\1\1\1\11\5\1\1\0"+
    "\1\11\6\1\1\0\4\1\1\11\1\1\1\0\1\1"+
    "\1\0\2\1\1\0\1\1\1\0\5\1\1\11\3\1"+
    "\1\0\1\1\1\11\1\1\1\0\4\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\11\4\1\1\0\1\1"+
    "\1\11\1\1\1\11\3\1\1\11\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[167];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    
      StringBuffer string = new StringBuffer();

      private Symbol symbol(int type) {
        return new Symbol(type, yyline, yycolumn);
      }
      private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
      }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PascalFlexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 220) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  private static String zzToPrintable(String str) {
    StringBuilder builder = new StringBuilder();
    for (int n = 0 ; n < str.length() ; ) {
      int ch = str.codePointAt(n);
      int charCount = Character.charCount(ch);
      n += charCount;
      if (ch > 31 && ch < 127) {
        builder.append((char)ch);
      } else if (charCount == 1) {
        builder.append(String.format("\\u%04X", ch));
      } else {
        builder.append(String.format("\\U%06X", ch));
      }
    }
    return builder.toString();
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [175] { throw new Error(\"Illegal character <\"+yytext()+\">\"); }");
            { throw new Error("Illegal character <"+yytext()+">");
            }
          case 56: break;
          case 2: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [174] { return symbol(sym.Identificador, yytext()); }");
            { return symbol(sym.Identificador, yytext());
            }
          case 57: break;
          case 3: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [164] { return symbol(sym.ParentesisAbrir); }");
            { return symbol(sym.ParentesisAbrir);
            }
          case 58: break;
          case 4: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [134] { return symbol(sym.Coma); }");
            { return symbol(sym.Coma);
            }
          case 59: break;
          case 5: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [165] { return symbol(sym.ParentesisCerrar); }");
            { return symbol(sym.ParentesisCerrar);
            }
          case 60: break;
          case 6: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [125] { yybegin(COMMENT); }");
            { yybegin(COMMENT);
            }
          case 61: break;
          case 7: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [127] { return symbol(sym.LlaveCerrar); }");
            { return symbol(sym.LlaveCerrar);
            }
          case 62: break;
          case 8: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [151] { return symbol(sym.OperadorMultiplicacion); }");
            { return symbol(sym.OperadorMultiplicacion);
            }
          case 63: break;
          case 9: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [139] { return symbol(sym.BracketAbrir); }");
            { return symbol(sym.BracketAbrir);
            }
          case 64: break;
          case 10: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [140] { return symbol(sym.BracketCerrar); }");
            { return symbol(sym.BracketCerrar);
            }
          case 65: break;
          case 11: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [136] { return symbol(sym.PuntoComa); }");
            { return symbol(sym.PuntoComa);
            }
          case 66: break;
          case 12: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [143] { return symbol(sym.OperadorIgual); }");
            { return symbol(sym.OperadorIgual);
            }
          case 67: break;
          case 13: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [138] { return symbol(sym.DosPuntos); }");
            { return symbol(sym.DosPuntos);
            }
          case 68: break;
          case 14: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [135] { return symbol(sym.Punto); }");
            { return symbol(sym.Punto);
            }
          case 69: break;
          case 15: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [126] { yybegin(COMILLA_SIMPLE); }");
            { yybegin(COMILLA_SIMPLE);
            }
          case 70: break;
          case 16: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [145] { return symbol(sym.OperadorMenor); }");
            { return symbol(sym.OperadorMenor);
            }
          case 71: break;
          case 17: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [144] { return symbol(sym.OperadorMayor); }");
            { return symbol(sym.OperadorMayor);
            }
          case 72: break;
          case 18: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [149] { return symbol(sym.OperadorSuma); }");
            { return symbol(sym.OperadorSuma);
            }
          case 73: break;
          case 19: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [150] { return symbol(sym.OperadorResta); }");
            { return symbol(sym.OperadorResta);
            }
          case 74: break;
          case 20: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [153] { return symbol(sym.OperadorDivision); }");
            { return symbol(sym.OperadorDivision);
            }
          case 75: break;
          case 21: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [124] {  }");
            { 
            }
          case 76: break;
          case 22: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [162] { return symbol(sym.LiteralEntero, new Integer(Integer.parseInt(yytext()))); }");
            { return symbol(sym.LiteralEntero, new Integer(Integer.parseInt(yytext())));
            }
          case 77: break;
          case 23: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [179] { yybegin(YYINITIAL); }");
            { yybegin(YYINITIAL);
            }
          case 78: break;
          case 24: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [186] { string.append(yytext()); }");
            { string.append(yytext());
            }
          case 79: break;
          case 25: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [184] { yybegin(YYINITIAL);return symbol(sym.LiteralString,string.toString()); }");
            { yybegin(YYINITIAL);return symbol(sym.LiteralString,string.toString());
            }
          case 80: break;
          case 26: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [147] { return symbol(sym.OperadorOr); }");
            { return symbol(sym.OperadorOr);
            }
          case 81: break;
          case 27: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [168] { return symbol(sym.Of); }");
            { return symbol(sym.Of);
            }
          case 82: break;
          case 28: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [131] { return symbol(sym.If); }");
            { return symbol(sym.If);
            }
          case 83: break;
          case 29: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [137] { return symbol(sym.DosPuntosIgual); }");
            { return symbol(sym.DosPuntosIgual);
            }
          case 84: break;
          case 30: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [161] { return symbol(sym.LiteralString); }");
            { return symbol(sym.LiteralString);
            }
          case 85: break;
          case 31: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [142] { return symbol(sym.OperadorMenorIgual); }");
            { return symbol(sym.OperadorMenorIgual);
            }
          case 86: break;
          case 32: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [141] { return symbol(sym.OperadorMayorIgual); }");
            { return symbol(sym.OperadorMayorIgual);
            }
          case 87: break;
          case 33: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [146] { return symbol(sym.OperadorAnd); }");
            { return symbol(sym.OperadorAnd);
            }
          case 88: break;
          case 34: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [152] { return symbol(sym.OperadorMod); }");
            { return symbol(sym.OperadorMod);
            }
          case 89: break;
          case 35: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [170] { return symbol(sym.End); }");
            { return symbol(sym.End);
            }
          case 90: break;
          case 36: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [148] { return symbol(sym.OperadorNot); }");
            { return symbol(sym.OperadorNot);
            }
          case 91: break;
          case 37: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [154] { return symbol(sym.OperadorDivisionSpecial); }");
            { return symbol(sym.OperadorDivisionSpecial);
            }
          case 92: break;
          case 38: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [166] { return symbol(sym.Var); }");
            { return symbol(sym.Var);
            }
          case 93: break;
          case 39: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [160] { return symbol(sym.LiteralCaracter); }");
            { return symbol(sym.LiteralCaracter);
            }
          case 94: break;
          case 40: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [173] { return symbol(sym.Read); }");
            { return symbol(sym.Read);
            }
          case 95: break;
          case 41: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [163] { return symbol(sym.LiteralBoolean); }");
            { return symbol(sym.LiteralBoolean);
            }
          case 96: break;
          case 42: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [155] { return symbol(sym.Tipo); }");
            { return symbol(sym.Tipo);
            }
          case 97: break;
          case 43: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [133] { return symbol(sym.Then); }");
            { return symbol(sym.Then);
            }
          case 98: break;
          case 44: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [132] { return symbol(sym.Else); }");
            { return symbol(sym.Else);
            }
          case 99: break;
          case 45: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [156] { return symbol(sym.TipoChar); }");
            { return symbol(sym.TipoChar);
            }
          case 100: break;
          case 46: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [167] { return symbol(sym.Array); }");
            { return symbol(sym.Array);
            }
          case 101: break;
          case 47: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [171] { return symbol(sym.Write); }");
            { return symbol(sym.Write);
            }
          case 102: break;
          case 48: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [169] { return symbol(sym.Begin); }");
            { return symbol(sym.Begin);
            }
          case 103: break;
          case 49: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [159] { return symbol(sym.TipoString); }");
            { return symbol(sym.TipoString);
            }
          case 104: break;
          case 50: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [128] { return symbol(sym.Program); }");
            { return symbol(sym.Program);
            }
          case 105: break;
          case 51: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [172] { return symbol(sym.WriteLn); }");
            { return symbol(sym.WriteLn);
            }
          case 106: break;
          case 52: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [157] { return symbol(sym.TipoInteger); }");
            { return symbol(sym.TipoInteger);
            }
          case 107: break;
          case 53: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [158] { return symbol(sym.TipoBoolean); }");
            { return symbol(sym.TipoBoolean);
            }
          case 108: break;
          case 54: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [130] { return symbol(sym.Function); }");
            { return symbol(sym.Function);
            }
          case 109: break;
          case 55: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [129] { return symbol(sym.Procedure); }");
            { return symbol(sym.Procedure);
            }
          case 110: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java PascalFlexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        PascalFlexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new PascalFlexer(reader);
          do {
            System.out.println(scanner.next_token());
          } while (!scanner.zzAtEOF);

        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
