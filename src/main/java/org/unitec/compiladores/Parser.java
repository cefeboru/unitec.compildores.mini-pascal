
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package org.unitec.compiladores;

import java_cup.runtime.*;
import java.util.List;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import java.io.File;
import java.io.StringWriter;
import org.w3c.dom.CDATASection;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;
import org.w3c.dom.Node;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\151\000\002\005\007\000\002\002\004\000\002\005" +
    "\012\000\002\005\005\000\002\005\004\000\002\006\006" +
    "\000\002\006\004\000\002\007\006\000\002\007\004\000" +
    "\002\010\002\000\002\010\004\000\002\011\004\000\002" +
    "\011\003\000\002\011\003\000\002\021\014\000\002\021" +
    "\013\000\002\021\004\000\002\024\012\000\002\024\011" +
    "\000\002\024\004\000\002\025\002\000\002\025\004\000" +
    "\002\026\004\000\002\022\003\000\002\022\005\000\002" +
    "\023\006\000\002\023\005\000\002\013\002\000\002\013" +
    "\005\000\002\013\005\000\002\013\004\000\002\014\005" +
    "\000\002\033\003\000\002\033\005\000\002\034\003\000" +
    "\002\027\003\000\002\027\003\000\002\030\003\000\002" +
    "\030\003\000\002\030\003\000\002\030\003\000\002\031" +
    "\012\000\002\032\003\000\002\032\003\000\002\032\003" +
    "\000\002\046\003\000\002\046\005\000\002\046\004\000" +
    "\002\047\002\000\002\047\003\000\002\047\003\000\002" +
    "\047\003\000\002\047\003\000\002\047\003\000\002\047" +
    "\003\000\002\047\003\000\002\047\003\000\002\054\005" +
    "\000\002\050\005\000\002\051\010\000\002\051\006\000" +
    "\002\017\010\000\002\052\006\000\002\053\006\000\002" +
    "\055\006\000\002\055\010\000\002\056\006\000\002\003" +
    "\003\000\002\003\003\000\002\003\006\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\004\000" +
    "\002\003\003\000\002\040\006\000\002\041\002\000\002" +
    "\041\004\000\002\042\003\000\002\042\003\000\002\042" +
    "\003\000\002\042\003\000\002\042\003\000\002\042\003" +
    "\000\002\043\003\000\002\043\003\000\002\043\003\000" +
    "\002\043\003\000\002\043\003\000\002\043\003\000\002" +
    "\044\003\000\002\044\003\000\002\044\003\000\002\045" +
    "\003\000\002\045\003\000\002\037\003\000\002\037\005" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\057\003\000\002\060\003\000\002" +
    "\061\003\000\002\062\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\316\000\006\003\006\063\004\001\002\000\006\003" +
    "\306\056\023\001\002\000\004\002\305\001\002\000\012" +
    "\010\016\037\ufff8\064\014\065\011\001\002\000\012\010" +
    "\016\037\ufff8\064\014\065\011\001\002\000\004\037\301" +
    "\001\002\000\006\003\262\056\023\001\002\000\012\010" +
    "\ufff4\037\ufff4\064\ufff4\065\ufff4\001\002\000\012\010\ufff5" +
    "\037\ufff5\064\ufff5\065\ufff5\001\002\000\006\003\071\056" +
    "\023\001\002\000\006\003\067\067\070\001\002\000\016" +
    "\003\020\010\uffe6\037\uffe6\056\023\064\uffe6\065\uffe6\001" +
    "\002\000\004\070\065\001\002\000\020\003\020\010\uffe6" +
    "\037\uffe6\056\023\064\uffe6\065\uffe6\070\062\001\002\000" +
    "\010\053\060\054\uffe1\062\uffe1\001\002\000\004\054\025" +
    "\001\002\000\062\015\uffdf\016\uffdf\017\uffdf\020\uffdf\021" +
    "\uffdf\022\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf" +
    "\033\uffdf\035\uffdf\036\uffdf\040\uffdf\042\uffdf\043\uffdf\046" +
    "\uffdf\053\uffdf\054\uffdf\055\uffdf\061\uffdf\062\uffdf\070\uffdf" +
    "\001\002\000\012\010\ufff6\037\ufff6\064\ufff6\065\ufff6\001" +
    "\002\000\014\006\033\011\030\012\035\013\034\014\032" +
    "\001\002\000\004\070\uffde\001\002\000\004\070\uffdd\001" +
    "\002\000\006\062\uffda\070\uffda\001\002\000\004\070\uffe2" +
    "\001\002\000\006\062\uffdb\070\uffdb\001\002\000\004\047" +
    "\036\001\002\000\006\062\uffd9\070\uffd9\001\002\000\006" +
    "\062\uffdc\070\uffdc\001\002\000\012\071\045\072\043\073" +
    "\037\074\047\001\002\000\060\015\uff9a\016\uff9a\017\uff9a" +
    "\020\uff9a\021\uff9a\022\uff9a\026\uff9a\027\uff9a\030\uff9a\031" +
    "\uff9a\032\uff9a\033\uff9a\035\uff9a\036\uff9a\040\uff9a\042\uff9a" +
    "\043\uff9a\046\uff9a\050\uff9a\053\uff9a\062\uff9a\066\uff9a\070" +
    "\uff9a\001\002\000\060\015\uffa0\016\uffa0\017\uffa0\020\uffa0" +
    "\021\uffa0\022\uffa0\026\uffa0\027\uffa0\030\uffa0\031\uffa0\032" +
    "\uffa0\033\uffa0\035\uffa0\036\uffa0\040\uffa0\042\uffa0\043\uffa0" +
    "\046\uffa0\050\uffa0\053\uffa0\062\uffa0\066\uffa0\070\uffa0\001" +
    "\002\000\060\015\uff9d\016\uff9d\017\uff9d\020\uff9d\021\uff9d" +
    "\022\uff9d\026\uff9d\027\uff9d\030\uff9d\031\uff9d\032\uff9d\033" +
    "\uff9d\035\uff9d\036\uff9d\040\uff9d\042\uff9d\043\uff9d\046\uff9d" +
    "\050\uff9d\053\uff9d\062\uff9d\066\uff9d\070\uff9d\001\002\000" +
    "\060\015\uff9f\016\uff9f\017\uff9f\020\uff9f\021\uff9f\022\uff9f" +
    "\026\uff9f\027\uff9f\030\uff9f\031\uff9f\032\uff9f\033\uff9f\035" +
    "\uff9f\036\uff9f\040\uff9f\042\uff9f\043\uff9f\046\uff9f\050\uff9f" +
    "\053\uff9f\062\uff9f\066\uff9f\070\uff9f\001\002\000\060\015" +
    "\uff9b\016\uff9b\017\uff9b\020\uff9b\021\uff9b\022\uff9b\026\uff9b" +
    "\027\uff9b\030\uff9b\031\uff9b\032\uff9b\033\uff9b\035\uff9b\036" +
    "\uff9b\040\uff9b\042\uff9b\043\uff9b\046\uff9b\050\uff9b\053\uff9b" +
    "\062\uff9b\066\uff9b\070\uff9b\001\002\000\004\066\050\001" +
    "\002\000\060\015\uff9c\016\uff9c\017\uff9c\020\uff9c\021\uff9c" +
    "\022\uff9c\026\uff9c\027\uff9c\030\uff9c\031\uff9c\032\uff9c\033" +
    "\uff9c\035\uff9c\036\uff9c\040\uff9c\042\uff9c\043\uff9c\046\uff9c" +
    "\050\uff9c\053\uff9c\062\uff9c\066\uff9c\070\uff9c\001\002\000" +
    "\060\015\uff9e\016\uff9e\017\uff9e\020\uff9e\021\uff9e\022\uff9e" +
    "\026\uff9e\027\uff9e\030\uff9e\031\uff9e\032\uff9e\033\uff9e\035" +
    "\uff9e\036\uff9e\040\uff9e\042\uff9e\043\uff9e\046\uff9e\050\uff9e" +
    "\053\uff9e\062\uff9e\066\uff9e\070\uff9e\001\002\000\060\015" +
    "\uff99\016\uff99\017\uff99\020\uff99\021\uff99\022\uff99\026\uff99" +
    "\027\uff99\030\uff99\031\uff99\032\uff99\033\uff99\035\uff99\036" +
    "\uff99\040\uff99\042\uff99\043\uff99\046\uff99\050\uff99\053\uff99" +
    "\062\uff99\066\uff99\070\uff99\001\002\000\012\071\045\072" +
    "\043\073\037\074\047\001\002\000\004\050\052\001\002" +
    "\000\004\007\053\001\002\000\010\011\054\012\057\013" +
    "\055\001\002\000\004\070\uffd6\001\002\000\004\070\uffd5" +
    "\001\002\000\004\070\uffd8\001\002\000\004\070\uffd7\001" +
    "\002\000\004\056\023\001\002\000\006\054\uffe0\062\uffe0" +
    "\001\002\000\016\003\020\010\uffe6\037\uffe6\056\023\064" +
    "\uffe6\065\uffe6\001\002\000\012\010\uffe3\037\uffe3\064\uffe3" +
    "\065\uffe3\001\002\000\012\010\uffe4\037\uffe4\064\uffe4\065" +
    "\uffe4\001\002\000\016\003\020\010\uffe6\037\uffe6\056\023" +
    "\064\uffe6\065\uffe6\001\002\000\012\010\uffe5\037\uffe5\064" +
    "\uffe5\065\uffe5\001\002\000\006\003\ufffb\067\ufffb\001\002" +
    "\000\004\002\ufffe\001\002\000\012\010\uffee\037\uffee\064" +
    "\uffee\065\uffee\001\002\000\004\061\073\001\002\000\010" +
    "\010\100\056\023\062\077\001\002\000\006\062\uffea\070" +
    "\257\001\002\000\004\062\253\001\002\000\004\054\251" +
    "\001\002\000\004\070\104\001\002\000\004\056\023\001" +
    "\002\000\004\054\102\001\002\000\012\011\030\012\035" +
    "\013\034\014\032\001\002\000\006\062\uffe8\070\uffe8\001" +
    "\002\000\006\010\110\037\uffed\001\002\000\006\003\247" +
    "\070\250\001\002\000\004\037\113\001\002\000\006\010" +
    "\110\037\uffed\001\002\000\012\003\020\010\uffe6\037\uffe6" +
    "\056\023\001\002\000\006\010\uffeb\037\uffeb\001\002\000" +
    "\004\037\uffec\001\002\000\030\003\127\004\114\005\135" +
    "\034\126\037\116\040\uffd1\041\115\044\132\045\120\056" +
    "\023\070\uffd1\001\002\000\004\061\241\001\002\000\004" +
    "\056\023\001\002\000\030\003\127\004\114\005\135\034" +
    "\126\037\116\040\uffd1\041\115\044\132\045\120\056\023" +
    "\070\uffd1\001\002\000\012\036\uffce\040\uffce\046\uffce\070" +
    "\uffce\001\002\000\030\003\127\004\114\005\135\034\126" +
    "\037\116\041\115\044\132\045\120\046\uffd1\056\023\070" +
    "\uffd1\001\002\000\012\036\uffcd\040\uffcd\046\uffcd\070\uffcd" +
    "\001\002\000\012\036\uffca\040\uffca\046\uffca\070\uffca\001" +
    "\002\000\012\036\uffc9\040\uffc9\046\uffc9\070\uffc9\001\002" +
    "\000\012\036\uffd0\040\uffd0\046\uffd0\070\uffd0\001\002\000" +
    "\004\040\226\001\002\000\024\025\145\026\147\027\154" +
    "\056\023\061\153\071\045\072\043\073\037\074\047\001" +
    "\002\000\034\003\127\004\114\005\135\034\126\036\uffd1" +
    "\037\116\040\uffd1\041\115\044\132\045\120\046\uffd1\056" +
    "\023\070\uffd1\001\002\000\012\036\uffcf\040\uffcf\046\uffcf" +
    "\070\uffcf\001\002\000\004\055\216\001\002\000\024\025" +
    "\145\026\147\027\154\056\023\061\153\071\045\072\043" +
    "\073\037\074\047\001\002\000\012\036\uffcb\040\uffcb\046" +
    "\uffcb\070\uffcb\001\002\000\012\036\uffd4\040\uffd4\046\uffd4" +
    "\070\142\001\002\000\004\061\137\001\002\000\012\036" +
    "\uffcc\040\uffcc\046\uffcc\070\uffcc\001\002\000\004\056\023" +
    "\001\002\000\004\062\141\001\002\000\012\036\uffbf\040" +
    "\uffbf\046\uffbf\070\uffbf\001\002\000\034\003\127\004\114" +
    "\005\135\034\126\036\uffd1\037\116\040\uffd1\041\115\044" +
    "\132\045\120\046\uffd1\056\023\070\uffd1\001\002\000\012" +
    "\036\uffd3\040\uffd3\046\uffd3\070\uffd3\001\002\000\034\015" +
    "\161\016\167\017\160\020\174\021\171\022\164\026\156" +
    "\027\166\030\170\031\157\032\163\033\172\043\214\001" +
    "\002\000\024\025\uffa7\026\uffa7\027\uffa7\056\uffa7\061\uffa7" +
    "\071\uffa7\072\uffa7\073\uffa7\074\uffa7\001\002\000\054\015" +
    "\uffb7\016\uffb7\017\uffb7\020\uffb7\021\uffb7\022\uffb7\026\uffb7" +
    "\027\uffb7\030\uffb7\031\uffb7\032\uffb7\033\uffb7\035\uffb7\036" +
    "\uffb7\040\uffb7\042\uffb7\043\uffb7\046\uffb7\053\uffb7\062\uffb7" +
    "\070\uffb7\001\002\000\024\025\uffa6\026\uffa6\027\uffa6\056" +
    "\uffa6\061\uffa6\071\uffa6\072\uffa6\073\uffa6\074\uffa6\001\002" +
    "\000\054\015\uffbe\016\uffbe\017\uffbe\020\uffbe\021\uffbe\022" +
    "\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe" +
    "\035\uffbe\036\uffbe\040\uffbe\042\uffbe\043\uffbe\046\uffbe\053" +
    "\uffbe\062\uffbe\070\uffbe\001\002\000\024\025\145\026\147" +
    "\027\154\056\023\061\153\071\045\072\043\073\037\074" +
    "\047\001\002\000\056\015\uffbd\016\uffbd\017\uffbd\020\uffbd" +
    "\021\uffbd\022\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd\032" +
    "\uffbd\033\uffbd\035\uffbd\036\uffbd\040\uffbd\042\uffbd\043\uffbd" +
    "\046\uffbd\053\uffbd\061\204\062\uffbd\070\uffbd\001\002\000" +
    "\024\025\145\026\147\027\154\056\023\061\153\071\045" +
    "\072\043\073\037\074\047\001\002\000\024\025\uffa5\026" +
    "\uffa5\027\uffa5\056\uffa5\061\uffa5\071\uffa5\072\uffa5\073\uffa5" +
    "\074\uffa5\001\002\000\034\015\161\016\167\017\160\020" +
    "\174\021\171\022\164\026\156\027\166\030\170\031\157" +
    "\032\163\033\172\062\173\001\002\000\024\025\uffad\026" +
    "\uffad\027\uffad\056\uffad\061\uffad\071\uffad\072\uffad\073\uffad" +
    "\074\uffad\001\002\000\024\025\uffa9\026\uffa9\027\uffa9\056" +
    "\uffa9\061\uffa9\071\uffa9\072\uffa9\073\uffa9\074\uffa9\001\002" +
    "\000\024\025\uffb1\026\uffb1\027\uffb1\056\uffb1\061\uffb1\071" +
    "\uffb1\072\uffb1\073\uffb1\074\uffb1\001\002\000\024\025\uffb3" +
    "\026\uffb3\027\uffb3\056\uffb3\061\uffb3\071\uffb3\072\uffb3\073" +
    "\uffb3\074\uffb3\001\002\000\024\025\145\026\147\027\154" +
    "\056\023\061\153\071\045\072\043\073\037\074\047\001" +
    "\002\000\024\025\uffaa\026\uffaa\027\uffaa\056\uffaa\061\uffaa" +
    "\071\uffaa\072\uffaa\073\uffaa\074\uffaa\001\002\000\024\025" +
    "\uffaf\026\uffaf\027\uffaf\056\uffaf\061\uffaf\071\uffaf\072\uffaf" +
    "\073\uffaf\074\uffaf\001\002\000\024\025\145\026\147\027" +
    "\154\056\023\061\153\071\045\072\043\073\037\074\047" +
    "\001\002\000\024\025\uffac\026\uffac\027\uffac\056\uffac\061" +
    "\uffac\071\uffac\072\uffac\073\uffac\074\uffac\001\002\000\024" +
    "\025\uffb2\026\uffb2\027\uffb2\056\uffb2\061\uffb2\071\uffb2\072" +
    "\uffb2\073\uffb2\074\uffb2\001\002\000\024\025\uffab\026\uffab" +
    "\027\uffab\056\uffab\061\uffab\071\uffab\072\uffab\073\uffab\074" +
    "\uffab\001\002\000\024\025\uffae\026\uffae\027\uffae\056\uffae" +
    "\061\uffae\071\uffae\072\uffae\073\uffae\074\uffae\001\002\000" +
    "\024\025\uffa8\026\uffa8\027\uffa8\056\uffa8\061\uffa8\071\uffa8" +
    "\072\uffa8\073\uffa8\074\uffa8\001\002\000\060\015\uffb5\016" +
    "\uffb5\017\uffb5\020\uffb5\021\uffb5\022\uffb5\023\176\024\177" +
    "\026\uffb5\027\uffb5\030\uffb5\031\uffb5\032\uffb5\033\uffb5\035" +
    "\uffb5\036\uffb5\040\uffb5\042\uffb5\043\uffb5\046\uffb5\053\uffb5" +
    "\062\uffb5\070\uffb5\001\002\000\024\025\uffb0\026\uffb0\027" +
    "\uffb0\056\uffb0\061\uffb0\071\uffb0\072\uffb0\073\uffb0\074\uffb0" +
    "\001\002\000\004\061\153\001\002\000\004\061\uffa4\001" +
    "\002\000\004\061\uffa3\001\002\000\054\015\uffb6\016\uffb6" +
    "\017\uffb6\020\uffb6\021\uffb6\022\uffb6\026\uffb6\027\uffb6\030" +
    "\uffb6\031\uffb6\032\uffb6\033\uffb6\035\uffb6\036\uffb6\040\uffb6" +
    "\042\uffb6\043\uffb6\046\uffb6\053\uffb6\062\uffb6\070\uffb6\001" +
    "\002\000\054\015\uffb4\016\uffb4\017\uffb4\020\uffb4\021\uffb4" +
    "\022\uffb4\026\uffb4\027\uffb4\030\uffb4\031\uffb4\032\uffb4\033" +
    "\uffb4\035\uffb4\036\uffb4\040\uffb4\042\uffb4\043\uffb4\046\uffb4" +
    "\053\uffb4\062\uffb4\070\uffb4\001\002\000\054\015\161\016" +
    "\167\017\160\020\174\021\171\022\164\026\156\027\166" +
    "\030\170\031\157\032\163\033\172\035\uffb9\036\uffb9\040" +
    "\uffb9\042\uffb9\043\uffb9\046\uffb9\053\uffb9\062\uffb9\070\uffb9" +
    "\001\002\000\054\015\161\016\167\017\160\020\174\021" +
    "\171\022\164\026\156\027\166\030\170\031\157\032\163" +
    "\033\172\035\uffba\036\uffba\040\uffba\042\uffba\043\uffba\046" +
    "\uffba\053\uffba\062\uffba\070\uffba\001\002\000\026\025\145" +
    "\026\147\027\154\056\023\061\153\062\207\071\045\072" +
    "\043\073\037\074\047\001\002\000\004\062\212\001\002" +
    "\000\036\015\161\016\167\017\160\020\174\021\171\022" +
    "\164\026\156\027\166\030\170\031\157\032\163\033\172" +
    "\053\210\062\uffa2\001\002\000\054\015\uffbb\016\uffbb\017" +
    "\uffbb\020\uffbb\021\uffbb\022\uffbb\026\uffbb\027\uffbb\030\uffbb" +
    "\031\uffbb\032\uffbb\033\uffbb\035\uffbb\036\uffbb\040\uffbb\042" +
    "\uffbb\043\uffbb\046\uffbb\053\uffbb\062\uffbb\070\uffbb\001\002" +
    "\000\024\025\145\026\147\027\154\056\023\061\153\071" +
    "\045\072\043\073\037\074\047\001\002\000\004\062\uffa1" +
    "\001\002\000\054\015\uffbc\016\uffbc\017\uffbc\020\uffbc\021" +
    "\uffbc\022\uffbc\026\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc" +
    "\033\uffbc\035\uffbc\036\uffbc\040\uffbc\042\uffbc\043\uffbc\046" +
    "\uffbc\053\uffbc\062\uffbc\070\uffbc\001\002\000\054\015\161" +
    "\016\167\017\160\020\174\021\171\022\164\026\156\027" +
    "\166\030\170\031\157\032\163\033\172\035\uffb8\036\uffb8" +
    "\040\uffb8\042\uffb8\043\uffb8\046\uffb8\053\uffb8\062\uffb8\070" +
    "\uffb8\001\002\000\032\004\114\005\135\034\126\036\uffd1" +
    "\037\116\040\uffd1\041\115\044\132\045\120\046\uffd1\056" +
    "\023\070\uffd1\001\002\000\012\036\uffc3\040\uffc3\046\uffc3" +
    "\070\uffc3\001\002\000\024\025\145\026\147\027\154\056" +
    "\023\061\153\071\045\072\043\073\037\074\047\001\002" +
    "\000\044\015\161\016\167\017\160\020\174\021\171\022" +
    "\164\026\156\027\166\030\170\031\157\032\163\033\172" +
    "\036\uffc7\040\uffc7\042\uffc7\046\uffc7\070\uffc7\001\002\000" +
    "\012\036\uffd2\040\uffd2\046\uffd2\070\uffd2\001\002\000\034" +
    "\015\161\016\167\017\160\020\174\021\171\022\164\026" +
    "\156\027\166\030\170\031\157\032\163\033\172\035\222" +
    "\001\002\000\032\004\114\005\135\034\126\036\uffd1\037" +
    "\116\040\uffd1\041\115\044\132\045\120\046\uffd1\056\023" +
    "\070\uffd1\001\002\000\012\036\224\040\uffc5\046\uffc5\070" +
    "\uffc5\001\002\000\032\004\114\005\135\034\126\036\uffd1" +
    "\037\116\040\uffd1\041\115\044\132\045\120\046\uffd1\056" +
    "\023\070\uffd1\001\002\000\012\036\uffc6\040\uffc6\046\uffc6" +
    "\070\uffc6\001\002\000\006\003\ufffa\070\ufffa\001\002\000" +
    "\004\046\230\001\002\000\024\025\145\026\147\027\154" +
    "\056\023\061\153\071\045\072\043\073\037\074\047\001" +
    "\002\000\042\015\161\016\167\017\160\020\174\021\171" +
    "\022\164\026\156\027\166\030\170\031\157\032\163\033" +
    "\172\036\uffc2\040\uffc2\046\uffc2\070\uffc2\001\002\000\004" +
    "\040\233\001\002\000\012\036\uffc8\040\uffc8\046\uffc8\070" +
    "\uffc8\001\002\000\004\042\235\001\002\000\024\025\145" +
    "\026\147\027\154\056\023\061\153\071\045\072\043\073" +
    "\037\074\047\001\002\000\034\015\161\016\167\017\160" +
    "\020\174\021\171\022\164\026\156\027\166\030\170\031" +
    "\157\032\163\033\172\043\237\001\002\000\034\003\127" +
    "\004\114\005\135\034\126\036\uffd1\037\116\040\uffd1\041" +
    "\115\044\132\045\120\046\uffd1\056\023\070\uffd1\001\002" +
    "\000\012\036\uffc4\040\uffc4\046\uffc4\070\uffc4\001\002\000" +
    "\004\074\047\001\002\000\006\053\243\062\244\001\002" +
    "\000\004\056\023\001\002\000\012\036\uffc1\040\uffc1\046" +
    "\uffc1\070\uffc1\001\002\000\004\062\246\001\002\000\012" +
    "\036\uffc0\040\uffc0\046\uffc0\070\uffc0\001\002\000\006\003" +
    "\ufff9\070\ufff9\001\002\000\012\010\uffef\037\uffef\064\uffef" +
    "\065\uffef\001\002\000\012\011\030\012\035\013\034\014" +
    "\032\001\002\000\006\062\uffe7\070\uffe7\001\002\000\004" +
    "\070\254\001\002\000\006\010\110\037\uffed\001\002\000" +
    "\006\003\247\070\256\001\002\000\012\010\ufff0\037\ufff0" +
    "\064\ufff0\065\ufff0\001\002\000\006\010\100\056\023\001" +
    "\002\000\004\062\uffe9\001\002\000\004\061\263\001\002" +
    "\000\012\010\ufff1\037\ufff1\064\ufff1\065\ufff1\001\002\000" +
    "\010\010\100\056\023\062\265\001\002\000\004\062\273" +
    "\001\002\000\004\054\266\001\002\000\014\006\033\011" +
    "\030\012\035\013\034\014\032\001\002\000\004\070\270" +
    "\001\002\000\006\010\110\037\uffed\001\002\000\006\003" +
    "\247\070\272\001\002\000\012\010\ufff2\037\ufff2\064\ufff2" +
    "\065\ufff2\001\002\000\004\054\274\001\002\000\014\006" +
    "\033\011\030\012\035\013\034\014\032\001\002\000\004" +
    "\070\276\001\002\000\006\010\110\037\uffed\001\002\000" +
    "\006\003\247\070\300\001\002\000\012\010\ufff3\037\ufff3" +
    "\064\ufff3\065\ufff3\001\002\000\030\003\127\004\114\005" +
    "\135\034\126\037\116\040\uffd1\041\115\044\132\045\120" +
    "\056\023\070\uffd1\001\002\000\004\040\303\001\002\000" +
    "\006\003\ufffc\067\ufffc\001\002\000\004\037\ufff7\001\002" +
    "\000\004\002\000\001\002\000\004\002\ufffd\001\002\000" +
    "\006\061\310\070\311\001\002\000\004\056\023\001\002" +
    "\000\012\010\016\037\ufff8\064\014\065\011\001\002\000" +
    "\006\003\067\067\313\001\002\000\004\002\001\001\002" +
    "\000\004\062\315\001\002\000\004\070\316\001\002\000" +
    "\012\010\016\037\ufff8\064\014\065\011\001\002\000\006" +
    "\003\067\067\320\001\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\316\000\004\005\004\001\001\000\004\034\306\001" +
    "\001\000\002\001\001\000\014\006\014\010\007\011\006" +
    "\021\012\024\011\001\001\000\012\010\303\011\006\021" +
    "\012\024\011\001\001\000\002\001\001\000\004\034\260" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\034" +
    "\071\001\001\000\002\001\001\000\012\013\023\014\016" +
    "\033\021\034\020\001\001\000\002\001\001\000\012\013" +
    "\062\014\016\033\021\034\020\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\027\030\030\025\031\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\004\043\057\037\060\041\061\045\062" +
    "\040\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\004\050\057\037\060\041\061\045\062\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\032\055" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\033\060\034\020\001\001" +
    "\000\002\001\001\000\012\013\063\014\016\033\021\034" +
    "\020\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\013\065\014\016\033\021\034\020\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\022\074\023\073\033\075\034" +
    "\020\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\033\100\034\020\001" +
    "\001\000\002\001\001\000\004\030\102\001\001\000\002" +
    "\001\001\000\010\007\104\025\105\026\106\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\025\111\026\106" +
    "\001\001\000\012\013\110\014\016\033\021\034\020\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\017\116" +
    "\034\130\046\124\047\133\050\123\051\127\052\120\053" +
    "\135\054\122\055\121\056\132\001\001\000\002\001\001" +
    "\000\006\034\130\050\233\001\001\000\030\017\116\034" +
    "\130\046\231\047\133\050\123\051\127\052\120\053\135" +
    "\054\122\055\121\056\132\001\001\000\002\001\001\000" +
    "\030\017\116\034\130\046\226\047\133\050\123\051\127" +
    "\052\120\053\135\054\122\055\121\056\132\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\003\220\004\147\034" +
    "\151\040\145\044\150\057\037\060\041\061\045\062\040" +
    "\001\001\000\030\017\116\034\130\046\217\047\133\050" +
    "\123\051\127\052\120\053\135\054\122\055\121\056\132" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\003" +
    "\143\004\147\034\151\040\145\044\150\057\037\060\041" +
    "\061\045\062\040\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\034\137" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\017" +
    "\116\034\130\046\142\047\133\050\123\051\127\052\120" +
    "\053\135\054\122\055\121\056\132\001\001\000\002\001" +
    "\001\000\006\042\161\043\164\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\003\212\004\147\034\151\040\145\044\150\057\037" +
    "\060\041\061\045\062\040\001\001\000\002\001\001\000" +
    "\024\003\154\004\147\034\151\040\145\044\150\057\037" +
    "\060\041\061\045\062\040\001\001\000\002\001\001\000" +
    "\006\042\161\043\164\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\003" +
    "\202\004\147\034\151\040\145\044\150\057\037\060\041" +
    "\061\045\062\040\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\003\201\004\147\034\151\040\145\044\150" +
    "\057\037\060\041\061\045\062\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\041\177\045\174\001\001\000" +
    "\002\001\001\000\004\040\200\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\042\161\043\164\001\001\000\006\042\161\043\164" +
    "\001\001\000\026\003\205\004\147\034\151\037\204\040" +
    "\145\044\150\057\037\060\041\061\045\062\040\001\001" +
    "\000\002\001\001\000\006\042\161\043\164\001\001\000" +
    "\002\001\001\000\026\003\205\004\147\034\151\037\210" +
    "\040\145\044\150\057\037\060\041\061\045\062\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\042\161" +
    "\043\164\001\001\000\026\017\116\034\130\047\214\050" +
    "\123\051\127\052\120\053\135\054\122\055\121\056\132" +
    "\001\001\000\002\001\001\000\024\003\216\004\147\034" +
    "\151\040\145\044\150\057\037\060\041\061\045\062\040" +
    "\001\001\000\006\042\161\043\164\001\001\000\002\001" +
    "\001\000\006\042\161\043\164\001\001\000\026\017\116" +
    "\034\130\047\222\050\123\051\127\052\120\053\135\054" +
    "\122\055\121\056\132\001\001\000\002\001\001\000\026" +
    "\017\116\034\130\047\224\050\123\051\127\052\120\053" +
    "\135\054\122\055\121\056\132\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\003\230\004" +
    "\147\034\151\040\145\044\150\057\037\060\041\061\045" +
    "\062\040\001\001\000\006\042\161\043\164\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\003\235\004\147\034\151\040\145\044\150\057\037\060" +
    "\041\061\045\062\040\001\001\000\006\042\161\043\164" +
    "\001\001\000\030\017\116\034\130\046\237\047\133\050" +
    "\123\051\127\052\120\053\135\054\122\055\121\056\132" +
    "\001\001\000\002\001\001\000\004\062\241\001\001\000" +
    "\002\001\001\000\004\034\244\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\030\251\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\007\254\025\105\026\106\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\022\257" +
    "\023\073\033\075\034\020\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\022\263\023\073" +
    "\033\075\034\020\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\027\266\030\025\031\026\001\001\000\002" +
    "\001\001\000\010\007\270\025\105\026\106\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\027\274\030\025\031\026\001\001\000\002\001\001\000" +
    "\010\007\276\025\105\026\106\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\017\116\034\130\046\301\047" +
    "\133\050\123\051\127\052\120\053\135\054\122\055\121" +
    "\056\132\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\033\313\034\020\001\001\000\014\006" +
    "\311\010\007\011\006\021\012\024\011\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\006\316\010\007\011\006\021\012\024\011" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



        
        @Override
	public void report_error(String message, Object info) {
            if (info instanceof String)
                System.err.println(" " + info + " " + message + "\n");
            else {
                System.err.print("Syntax error: " ); 
                expected();
                System.err.println("pero se encontró el token \'" + ((Symbol)info).value + "\' en la Linea: " + ((Symbol)info).left + ", Columna: " + ((Symbol)info).right + ". " ); 
            } 
        }

        @Override
	public void syntax_error(Symbol s){
            System.err.print("Syntax error: " ); 
            expected();
            System.err.println("pero se encontró el token \'" + sym.terminalNames[s.sym] + "\' en la Linea: " + s.left + ", Columna: " + s.right + ". " ); 
	}

        public void expected(){
            List<Integer> token_list = this.expected_token_ids();
            if (token_list.size() <= 0){
                    token_list = this.expected_token_ids();
            }
            String expected_tokens = "";
            for (int i = 0 ; i < token_list.size(); i++){
                    int id = token_list.get(i);
                    if (id == 1){ //error
                        continue;
                    }
                    String terminal_name = sym.terminalNames[id];
                    if (i == token_list.size() - 1){
                        expected_tokens += terminal_name;
                    }else{
                        expected_tokens += terminal_name + " , ";
                    }
            }
            System.err.print("Se esperaba alguno de los siguientes tokens: [" + expected_tokens + "] ");
        };

        public void report_fatal_error(String message, Object info) {
            report_error(message, info);
            throw new RuntimeException("Fatal Syntax Error");
        }

        @Override
        public int error_sync_size(){
            return 1;
        }
        


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {


        /* Contruccion del arbol en XML */

        Document xmlDocument = null;    
        Element nodoPadre = null; 

        private void iniXML() {
        if (xmlDocument == null) {
            try {
                DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
                DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
                xmlDocument = docBuilder.newDocument();//Crear el documento XML
            } catch (Exception e) {
                System.err.println("el Arbol tiene ERROR: " + e.getMessage());
            }
        }
    }

    public void escribirXML() throws javax.xml.transform.TransformerConfigurationException, javax.xml.transform.TransformerException {
        //Escribir el archivo XML         
        xmlDocument.appendChild(nodoPadre);
        TransformerFactory transformerFactory = TransformerFactory.newInstance();
        Transformer transformer = transformerFactory.newTransformer();
        DOMSource origen = new DOMSource(xmlDocument);
        StreamResult result = new StreamResult(new File("AST.xml"));
        transformer.transform(origen, result);
    }

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= Program var PuntoComa block Punto 
            {
              Element RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Element v = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element b = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    iniXML();
                    nodoPadre = xmlDocument.createElement("Program"); 
                    if (v != null) { nodoPadre.appendChild(v); }
                    if(b != null) { nodoPadre.appendChild(b); }
                    escribirXML();
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element start_val = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= Program var ParentesisAbrir vars ParentesisCerrar PuntoComa block Punto 
            {
              Element RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Element v1 = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Element v2 = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element b = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    iniXML();
                    nodoPadre = xmlDocument.createElement("Program"); 
                    if (v1 != null) { nodoPadre.appendChild(v1); }
                    if (v2 != null) { nodoPadre.appendChild(v2); }
                    if(b != null) { nodoPadre.appendChild(b); }
                    escribirXML();
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= error block Punto 
            {
              Element RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element b = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 report_error("program1",""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // program ::= Program error 
            {
              Element RESULT =null;
		 report_error("program2",""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // block ::= decls Begin stmts End 
            {
              Element RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Element d = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Block");
                    if (d != null) { nPadre.appendChild(d); }
                    if (s != null) { nPadre.appendChild(s); }
                    RESULT = nPadre;                    
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // block ::= block error 
            {
              Element RESULT =null;
		 report_error("block1",""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // blockProc ::= procInlineDecls Begin stmts End 
            {
              Element RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Element p = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Block");
                    if (p != null) { nPadre.appendChild(p); }
                    if (s != null) { nPadre.appendChild(s); }
                    RESULT = nPadre;                    
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("blockProc",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // blockProc ::= blockProc error 
            {
              Element RESULT =null;
		 report_error("blockProc1",""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("blockProc",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // decls ::= 
            {
              Element RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decls",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // decls ::= decl decls 
            {
              Element RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element d = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element ds = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Declarations");
                    if (d != null && ds == null) {
                        RESULT = d;
                    } else if (d == null && ds != null){
                        RESULT = ds;
                    } else if (d != null && ds != null) {
                        nPadre.appendChild(d);
                        nPadre.appendChild(ds);
                        RESULT = nPadre;
                    } else RESULT = null;      
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decls",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // decl ::= Var vardecls 
            {
              Element RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element vd = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Declaration");
                    if (vd != null) { 
                        nPadre.appendChild(vd); 
                        RESULT = nPadre;                    
                    } else RESULT = null;
                    
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // decl ::= functionDecl 
            {
              Element RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element f = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Declaration");
                    if (f != null) { nPadre.appendChild(f); RESULT = nPadre;}
                                        
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // decl ::= procedureDecl 
            {
              Element RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element p = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Declaration");
                    if (p != null) { nPadre.appendChild(p); RESULT = nPadre;}                    
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // functionDecl ::= Function var ParentesisAbrir inlineArgs ParentesisCerrar DosPuntos type PuntoComa blockProc PuntoComa 
            {
              Element RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Element i = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Element in = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Element t = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element b = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("FunctionDeclaration");
                    if (i != null) { nPadre.appendChild(i); }
                    if (in != null) { nPadre.appendChild(in); }
                    if (t != null) { nPadre.appendChild(t); }
                    if (b != null) { nPadre.appendChild(b); }

                    RESULT = nPadre;                    
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functionDecl",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // functionDecl ::= Function var ParentesisAbrir ParentesisCerrar DosPuntos type PuntoComa blockProc PuntoComa 
            {
              Element RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Element i = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Element t = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element b = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("FunctionDeclaration");
                    if (i != null) { nPadre.appendChild(i); }
                    if (t != null) { nPadre.appendChild(t); }
                    if (b != null) { nPadre.appendChild(b); }

                    RESULT = nPadre;                    
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functionDecl",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // functionDecl ::= Function error 
            {
              Element RESULT =null;
		 report_error("functiondecl1",""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functionDecl",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // procedureDecl ::= Procedure var ParentesisAbrir inlineArgs ParentesisCerrar PuntoComa blockProc PuntoComa 
            {
              Element RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Element i = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Element in = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element b = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("ProcedureDeclaration");
                    if (i != null) { nPadre.appendChild(i); }
                    if (in != null) { nPadre.appendChild(in); }
                    if (b != null) { nPadre.appendChild(b); }

                    RESULT = nPadre;                    
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedureDecl",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // procedureDecl ::= Procedure var ParentesisAbrir ParentesisCerrar PuntoComa blockProc PuntoComa 
            {
              Element RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Element i = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element b = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    iniXML(); 
                    Element nPadre = xmlDocument.createElement("ProcedureDeclaration");
                    if (i != null) { nPadre.appendChild(i); }
                    if (b != null) { nPadre.appendChild(b); }

                    RESULT = nPadre;                    
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedureDecl",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // procedureDecl ::= Procedure error 
            {
              Element RESULT =null;
		 report_error("proceduredecl1",""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedureDecl",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // procInlineDecls ::= 
            {
              Element RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procInlineDecls",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // procInlineDecls ::= procInlineDecl procInlineDecls 
            {
              Element RESULT =null;
		int pdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element pd = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element pds = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("ProcInlinceDecls");
                    if (pd != null && pds == null) {
                        RESULT = pd;
                    } else if(pd == null && pds != null) {
                        RESULT = pds;
                    } else if(pd != null && pds != null) {
                        nPadre.appendChild(pd);
                        nPadre.appendChild(pds);
                        RESULT = nPadre;
                    } else RESULT = null;               
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procInlineDecls",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // procInlineDecl ::= Var vardecls 
            {
              Element RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element vd = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("VarsDeclarations");
                    if (vd != null){
                        nPadre.appendChild(vd);
                        RESULT = nPadre;
                    }               
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procInlineDecl",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // inlineArgs ::= inlineArg 
            {
              Element RESULT =null;
		int ialeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element ia = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("inlineArg");
                    if(ia != null) {
                        nPadre.appendChild(ia);
                        RESULT = nPadre;
                    }
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inlineArgs",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // inlineArgs ::= inlineArg PuntoComa inlineArgs 
            {
              Element RESULT =null;
		int ialeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Element ia = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int iasleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iasright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element ias = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Arguments");
                    nPadre.appendChild(ia);
                    nPadre.appendChild(ias);
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inlineArgs",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // inlineArg ::= Var vars DosPuntos identtype 
            {
              Element RESULT =null;
		int vsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Element vs = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("inlineArg");
                    if(vs != null) {
                        nPadre.appendChild(vs);
                    }
                    if( i != null ) {
                        Element nType = xmlDocument.createElement("Type");
                        nType.setAttribute("Value",i);
                        nPadre.appendChild(nType);                        
                    }
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inlineArg",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // inlineArg ::= vars DosPuntos identtype 
            {
              Element RESULT =null;
		int vsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Element vs = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("inlineArg");
                    if(vs != null) {
                        nPadre.appendChild(vs);
                    }
                    if( i != null ) {
                        Element nType = xmlDocument.createElement("Type");
                        nType.setAttribute("Value",i);
                        nPadre.appendChild(nType);                        
                    }
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inlineArg",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // vardecls ::= 
            {
              Element RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vardecls",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // vardecls ::= vardecl PuntoComa vardecls 
            {
              Element RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Element v = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element vs = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("VarsDeclarations");
                    if(v != null && vs == null ){
                        RESULT = v;
                    } else if(v == null && vs != null){
                        RESULT = vs;
                    } else if(v != null && vs != null){
                        nPadre.appendChild(v);
                        nPadre.appendChild(vs);
                        RESULT = nPadre;
                    } else RESULT = null;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vardecls",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // vardecls ::= error PuntoComa vardecls 
            {
              Element RESULT =null;
		int vsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element vs = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 report_error("vardecls1",""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vardecls",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // vardecls ::= error vardecls 
            {
              Element RESULT =null;
		int vsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element vs = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 report_error("vardecls2",""); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vardecls",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // vardecl ::= vars DosPuntos type 
            {
              Element RESULT =null;
		int vsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Element vs = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element t = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("VarDeclaration");
                    if (vs != null) { nPadre.appendChild(vs); }
                    nPadre.appendChild(t);
                    RESULT = nPadre;                    
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vardecl",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // vars ::= var 
            {
              Element RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element v = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Variable");
                    if (v != null) { nPadre.appendChild(v); }
                    RESULT = nPadre;                    
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vars",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // vars ::= var Coma vars 
            {
              Element RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Element v = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element vs = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Variables");
                    if (v != null) { nPadre.appendChild(v); }
                    if (vs != null) { nPadre.appendChild(vs); }
                    RESULT = nPadre;                    
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vars",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // var ::= Identificador 
            {
              Element RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("ID");
                    nPadre.setAttribute("Value",i);            
                    RESULT = nPadre;                    
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // type ::= identtype 
            {
              Element RESULT =null;
		int itleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int itright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String it = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Type");
                    if(it != null) {
                        nPadre.setAttribute("Value",it);
                        RESULT = nPadre;
                    } else RESULT = null;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // type ::= arraytype 
            {
              Element RESULT =null;
		int atsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int atsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element ats = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Type");
                    if(ats != null) {
                        nPadre.appendChild(ats);
                        RESULT = nPadre;
                    } else RESULT = null;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // identtype ::= TipoChar 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   RESULT = c;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identtype",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // identtype ::= TipoString 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   RESULT = c;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identtype",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // identtype ::= TipoBoolean 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   RESULT = c;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identtype",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // identtype ::= TipoInteger 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   RESULT = c;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identtype",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // arraytype ::= Array BracketAbrir literal PuntoPunto literal BracketCerrar Of arrayidenttype 
            {
              Element RESULT =null;
		int l1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Element l1 = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Element l2 = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
                    iniXML();
                    Element nPadre = xmlDocument.createElement("ArrayType");
                    if(l1 != null){nPadre.appendChild(l1);}
                    if(l2 != null){nPadre.appendChild(l2);}
                    if(t != null){nPadre.setAttribute("Type",t);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arraytype",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // arrayidenttype ::= TipoChar 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   RESULT = c;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arrayidenttype",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // arrayidenttype ::= TipoBoolean 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   RESULT = c;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arrayidenttype",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // arrayidenttype ::= TipoInteger 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   RESULT = c;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arrayidenttype",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // stmts ::= stmt 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Statements");
                    if (s != null) { nPadre.appendChild(s); RESULT = nPadre;}
                    
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // stmts ::= stmt PuntoComa stmts 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element ss = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    Element nPadre = xmlDocument.createElement("Statements");
                    iniXML();
                    if(s != null && ss == null){
                        RESULT = s;
                    } else if(s == null && ss != null){
                        RESULT = ss;
                    } else if(s != null && ss != null){
                        nPadre.appendChild(s);
                        nPadre.appendChild(ss);
                        RESULT = nPadre;
                    } else RESULT = null;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // stmts ::= error stmts 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // stmt ::= 
            {
              Element RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // stmt ::= assignstmt 
            {
              Element RESULT =null;
		int asleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int asright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element as = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Statement");
                    if (as != null) { nPadre.appendChild(as); }                 
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // stmt ::= ifstmt 
            {
              Element RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int isright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element is = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Statement");
                    if (is != null) { nPadre.appendChild(is); }                 
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // stmt ::= forstmt 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Statement");
                    if (s != null) { nPadre.appendChild(s); }                 
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // stmt ::= whilestmt 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Statement");
                    if (s != null) { nPadre.appendChild(s); }                 
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // stmt ::= repeatstmt 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Statement");
                    if (s != null) { nPadre.appendChild(s); }                 
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // stmt ::= readstmt 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Statement");
                    if (s != null) { nPadre.appendChild(s); }                 
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // stmt ::= writestmt 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Statement");
                    if (s != null) { nPadre.appendChild(s); }                 
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // stmt ::= blockstmt 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Statement");
                    if (s != null) { nPadre.appendChild(s); }                 
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // blockstmt ::= Begin stmts End 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Block");
                    if (s != null) { nPadre.appendChild(s); }             
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("blockstmt",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // assignstmt ::= var DosPuntosIgual expr 
            {
              Element RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Element i = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Assignment");
                    if (i != null) { nPadre.appendChild(i); }
                    if (e != null) { nPadre.appendChild(e); }                   
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignstmt",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ifstmt ::= If expr Then stmt Else stmt 
            {
              Element RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element s2 = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("IfStatement");
                    if (e != null) { nPadre.appendChild(e); }         
                    if (s != null) { nPadre.appendChild(s); }
                    if (s2 != null) { nPadre.appendChild(s2); }
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifstmt",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ifstmt ::= If expr Then stmt 
            {
              Element RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("IfStatement");
                    if (e != null) { nPadre.appendChild(e); }         
                    if (s != null) { nPadre.appendChild(s); }
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifstmt",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // forstmt ::= For assignstmt To expr Do stmts 
            {
              Element RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Element a = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("ForStatement");
                    if (a != null) { nPadre.appendChild(a); }
                    if (e != null) { nPadre.appendChild(e); }
                    if (s != null) { nPadre.appendChild(s); }
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("forstmt",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // whilestmt ::= While expr Do stmt 
            {
              Element RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("WhileStatement");
                    if (e != null) { nPadre.appendChild(e); }
                    if (s != null) { nPadre.appendChild(s); }
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("whilestmt",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // repeatstmt ::= Repeat stmts Until expr 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("RepeatStatement");
                    if (s != null) { nPadre.appendChild(s); }
                    if (e != null) { nPadre.appendChild(e); }
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("repeatstmt",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // writestmt ::= Write ParentesisAbrir string ParentesisCerrar 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("WriteStatement");
                    if (s != null) { nPadre.appendChild(s); }
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("writestmt",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // writestmt ::= Write ParentesisAbrir string Coma var ParentesisCerrar 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element v = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("WriteStatement");
                    if (s != null) { nPadre.appendChild(s); }
                    if (v != null) { nPadre.appendChild(v); }
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("writestmt",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // readstmt ::= Read ParentesisAbrir var ParentesisCerrar 
            {
              Element RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element v = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("ReadStatement");
                    if (v != null) { nPadre.appendChild(v); }
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("readstmt",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expr ::= literal 
            {
              Element RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element l = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Expression");
                    if (l != null) { nPadre.appendChild(l); }                   
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expr ::= var 
            {
              Element RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element v = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Expression");
                    if (v != null) { nPadre.appendChild(v); }                   
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expr ::= var ParentesisAbrir exprlist ParentesisCerrar 
            {
              Element RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Element v = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element el = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("FunctionCall");
                    if (v != null) { nPadre.appendChild(v);}
                    if (el != null) { nPadre.appendChild(el);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expr ::= var ParentesisAbrir ParentesisCerrar 
            {
              Element RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Element v = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("FunctionCall");
                    if (v != null) { nPadre.appendChild(v);}
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expr ::= expr opRelacion expr 
            {
              Element RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Element e1 = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element op = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element e2 = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Expression");
                    if (e1 != null) { nPadre.appendChild(e1);}
                    if (op != null) { nPadre.appendChild(op);}
                    if (e2 != null) { nPadre.appendChild(e2);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expr ::= expr opArit expr 
            {
              Element RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Element e1 = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element op = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element e2 = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Expression");
                    if (e1 != null) { nPadre.appendChild(e1);}
                    if (op != null) { nPadre.appendChild(op);}
                    if (e2 != null) { nPadre.appendChild(e2);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expr ::= opUnario expr 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element op = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Expression");
                    if (op != null) { nPadre.appendChild(op);}
                    if (e != null) { nPadre.appendChild(e);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expr ::= exprLogical 
            {
              Element RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Expression");
                    if (e != null) { nPadre.appendChild(e);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // exprLogical ::= ParentesisAbrir expr ParentesisCerrar exprOpLog 
            {
              Element RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Element e1 = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element e2 = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Expression");
                    if (e1 != null) { nPadre.appendChild(e1);}
                    if (e2 != null) { nPadre.appendChild(e2);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprLogical",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // exprOpLog ::= 
            {
              Element RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprOpLog",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // exprOpLog ::= opLogico exprLogical 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element op = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Expression");
                    if (op != null) { nPadre.appendChild(op);}
                    if (e != null)  { nPadre.appendChild(e);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprOpLog",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // opRelacion ::= OperadorIgual 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("RelationalOp");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opRelacion",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // opRelacion ::= OperadorDiferente 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("RelationalOp");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opRelacion",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // opRelacion ::= OperadorMayor 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("RelationalOp");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opRelacion",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // opRelacion ::= OperadorMenor 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("RelationalOp");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opRelacion",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // opRelacion ::= OperadorMenorIgual 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("RelationalOp");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opRelacion",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // opRelacion ::= OperadorMayorIgual 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("RelationalOp");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opRelacion",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // opArit ::= OperadorSuma 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("ArithmeticOp");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opArit",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // opArit ::= OperadorResta 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("ArithmeticOp");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opArit",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // opArit ::= OperadorMultiplicacion 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("ArithmeticOp");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opArit",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // opArit ::= OperadorDivision 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("ArithmeticOp");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opArit",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // opArit ::= OperadorMod 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("ArithmeticOp");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opArit",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // opArit ::= OperadorDivisionSpecial 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("ArithmeticOp");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opArit",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // opUnario ::= OperadorNot 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("UnaryOp");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opUnario",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // opUnario ::= OperadorSuma 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("UnaryOp");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opUnario",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // opUnario ::= OperadorResta 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("UnaryOp");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opUnario",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // opLogico ::= OperadorAnd 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("LogicalOp");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opLogico",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // opLogico ::= OperadorOr 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("LogicalOp");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opLogico",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // exprlist ::= expr 
            {
              Element RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("ExprList");
                    if (e != null) { nPadre.appendChild(e);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprlist",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // exprlist ::= expr Coma exprlist 
            {
              Element RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element el = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("ExprList");
                    if (e != null) { nPadre.appendChild(e);}
                    if (el != null) { nPadre.appendChild(el);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprlist",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // literal ::= integer 
            {
              Element RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element l = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Literal");
                    if (l != null) { nPadre.appendChild(l);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // literal ::= character 
            {
              Element RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element c = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Literal");
                    if (c != null) { nPadre.appendChild(c);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // literal ::= boolean 
            {
              Element RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element b = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Literal");
                    if (b != null) { nPadre.appendChild(b);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // literal ::= string 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Literal");
                    if (s != null) { nPadre.appendChild(s);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // integer ::= LiteralEntero 
            {
              Element RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Integer");
                    nPadre.setAttribute("Value",i.toString());
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("integer",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // character ::= LiteralCaracter 
            {
              Element RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Character c = (Character)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Character");
                    nPadre.setAttribute("Value",c.toString());            
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("character",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // boolean ::= LiteralBoolean 
            {
              Element RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Boolean");
                    nPadre.setAttribute("Value",b);          
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // string ::= LiteralString 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("String");
                    nPadre.setAttribute("Value",s);
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("string",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
