
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package org.unitec.compiladores;

import java_cup.runtime.*;
import java.util.List;
import java.util.ArrayList;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import java.io.File;
import java.io.StringWriter;
import org.w3c.dom.CDATASection;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;
import org.w3c.dom.Node;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\165\000\002\004\007\000\002\002\004\000\002\004" +
    "\012\000\002\004\005\000\002\004\007\000\002\005\006" +
    "\000\002\005\004\000\002\006\006\000\002\006\004\000" +
    "\002\007\002\000\002\007\004\000\002\007\004\000\002" +
    "\010\004\000\002\010\003\000\002\010\003\000\002\010" +
    "\004\000\002\014\014\000\002\014\013\000\002\014\004" +
    "\000\002\017\012\000\002\017\011\000\002\017\004\000" +
    "\002\020\002\000\002\020\004\000\002\021\004\000\002" +
    "\015\003\000\002\015\005\000\002\016\006\000\002\016" +
    "\005\000\002\011\002\000\002\011\005\000\002\011\005" +
    "\000\002\011\004\000\002\012\005\000\002\026\003\000" +
    "\002\026\005\000\002\027\003\000\002\022\003\000\002" +
    "\022\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\024\012\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\037\003\000" +
    "\002\037\005\000\002\037\004\000\002\040\002\000\002" +
    "\040\003\000\002\040\003\000\002\040\003\000\002\040" +
    "\003\000\002\040\003\000\002\040\003\000\002\040\003" +
    "\000\002\040\003\000\002\040\004\000\002\045\005\000" +
    "\002\045\004\000\002\041\005\000\002\041\004\000\002" +
    "\042\010\000\002\042\006\000\002\042\004\000\002\042" +
    "\005\000\002\013\010\000\002\013\004\000\002\043\006" +
    "\000\002\043\004\000\002\044\006\000\002\044\004\000" +
    "\002\046\006\000\002\046\010\000\002\046\004\000\002" +
    "\047\006\000\002\047\004\000\002\002\003\000\002\002" +
    "\003\000\002\002\006\000\002\002\005\000\002\002\005" +
    "\000\002\002\005\000\002\002\004\000\002\002\003\000" +
    "\002\031\006\000\002\032\002\000\002\032\004\000\002" +
    "\033\003\000\002\033\003\000\002\033\003\000\002\033" +
    "\003\000\002\033\003\000\002\033\003\000\002\034\003" +
    "\000\002\034\003\000\002\034\003\000\002\034\003\000" +
    "\002\034\003\000\002\034\003\000\002\035\003\000\002" +
    "\035\003\000\002\035\003\000\002\036\003\000\002\036" +
    "\003\000\002\030\003\000\002\030\005\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\050\003\000\002\051\003\000\002\052\003\000\002" +
    "\053\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\335\000\006\003\006\061\004\001\002\000\004\054" +
    "\024\001\002\000\004\002\324\001\002\000\014\003\014" +
    "\010\017\037\ufff8\062\010\063\007\001\002\000\006\003" +
    "\304\054\024\001\002\000\006\003\246\054\024\001\002" +
    "\000\014\003\ufff4\010\ufff4\037\ufff4\062\ufff4\063\ufff4\001" +
    "\002\000\004\065\244\001\002\000\014\003\ufff3\010\ufff3" +
    "\037\ufff3\062\ufff3\063\ufff3\001\002\000\004\040\243\001" +
    "\002\000\014\003\242\010\017\037\ufff8\062\010\063\007" +
    "\001\002\000\006\003\071\037\070\001\002\000\016\003" +
    "\021\010\uffe4\037\uffe4\054\024\062\uffe4\063\uffe4\001\002" +
    "\000\004\066\066\001\002\000\020\003\021\010\uffe4\037" +
    "\uffe4\054\024\062\uffe4\063\uffe4\066\063\001\002\000\010" +
    "\051\uffdf\052\uffdf\060\uffdf\001\002\000\006\051\026\052" +
    "\027\001\002\000\064\003\uffdd\015\uffdd\016\uffdd\017\uffdd" +
    "\020\uffdd\021\uffdd\022\uffdd\026\uffdd\027\uffdd\030\uffdd\031" +
    "\uffdd\032\uffdd\033\uffdd\035\uffdd\036\uffdd\040\uffdd\042\uffdd" +
    "\043\uffdd\046\uffdd\051\uffdd\052\uffdd\053\uffdd\057\uffdd\060" +
    "\uffdd\066\uffdd\001\002\000\014\003\ufff5\010\ufff5\037\ufff5" +
    "\062\ufff5\063\ufff5\001\002\000\004\054\024\001\002\000" +
    "\014\006\035\011\032\012\037\013\036\014\034\001\002" +
    "\000\004\066\uffdc\001\002\000\004\066\uffdb\001\002\000" +
    "\006\060\uffd8\066\uffd8\001\002\000\004\066\uffe0\001\002" +
    "\000\006\060\uffd9\066\uffd9\001\002\000\004\047\040\001" +
    "\002\000\006\060\uffd7\066\uffd7\001\002\000\006\060\uffda" +
    "\066\uffda\001\002\000\012\067\047\070\045\071\041\072" +
    "\051\001\002\000\062\003\uff8e\015\uff8e\016\uff8e\017\uff8e" +
    "\020\uff8e\021\uff8e\022\uff8e\026\uff8e\027\uff8e\030\uff8e\031" +
    "\uff8e\032\uff8e\033\uff8e\035\uff8e\036\uff8e\040\uff8e\042\uff8e" +
    "\043\uff8e\046\uff8e\050\uff8e\051\uff8e\060\uff8e\064\uff8e\066" +
    "\uff8e\001\002\000\062\003\uff94\015\uff94\016\uff94\017\uff94" +
    "\020\uff94\021\uff94\022\uff94\026\uff94\027\uff94\030\uff94\031" +
    "\uff94\032\uff94\033\uff94\035\uff94\036\uff94\040\uff94\042\uff94" +
    "\043\uff94\046\uff94\050\uff94\051\uff94\060\uff94\064\uff94\066" +
    "\uff94\001\002\000\062\003\uff91\015\uff91\016\uff91\017\uff91" +
    "\020\uff91\021\uff91\022\uff91\026\uff91\027\uff91\030\uff91\031" +
    "\uff91\032\uff91\033\uff91\035\uff91\036\uff91\040\uff91\042\uff91" +
    "\043\uff91\046\uff91\050\uff91\051\uff91\060\uff91\064\uff91\066" +
    "\uff91\001\002\000\062\003\uff93\015\uff93\016\uff93\017\uff93" +
    "\020\uff93\021\uff93\022\uff93\026\uff93\027\uff93\030\uff93\031" +
    "\uff93\032\uff93\033\uff93\035\uff93\036\uff93\040\uff93\042\uff93" +
    "\043\uff93\046\uff93\050\uff93\051\uff93\060\uff93\064\uff93\066" +
    "\uff93\001\002\000\062\003\uff8f\015\uff8f\016\uff8f\017\uff8f" +
    "\020\uff8f\021\uff8f\022\uff8f\026\uff8f\027\uff8f\030\uff8f\031" +
    "\uff8f\032\uff8f\033\uff8f\035\uff8f\036\uff8f\040\uff8f\042\uff8f" +
    "\043\uff8f\046\uff8f\050\uff8f\051\uff8f\060\uff8f\064\uff8f\066" +
    "\uff8f\001\002\000\004\064\052\001\002\000\062\003\uff90" +
    "\015\uff90\016\uff90\017\uff90\020\uff90\021\uff90\022\uff90\026" +
    "\uff90\027\uff90\030\uff90\031\uff90\032\uff90\033\uff90\035\uff90" +
    "\036\uff90\040\uff90\042\uff90\043\uff90\046\uff90\050\uff90\051" +
    "\uff90\060\uff90\064\uff90\066\uff90\001\002\000\062\003\uff92" +
    "\015\uff92\016\uff92\017\uff92\020\uff92\021\uff92\022\uff92\026" +
    "\uff92\027\uff92\030\uff92\031\uff92\032\uff92\033\uff92\035\uff92" +
    "\036\uff92\040\uff92\042\uff92\043\uff92\046\uff92\050\uff92\051" +
    "\uff92\060\uff92\064\uff92\066\uff92\001\002\000\062\003\uff8d" +
    "\015\uff8d\016\uff8d\017\uff8d\020\uff8d\021\uff8d\022\uff8d\026" +
    "\uff8d\027\uff8d\030\uff8d\031\uff8d\032\uff8d\033\uff8d\035\uff8d" +
    "\036\uff8d\040\uff8d\042\uff8d\043\uff8d\046\uff8d\050\uff8d\051" +
    "\uff8d\060\uff8d\064\uff8d\066\uff8d\001\002\000\012\067\047" +
    "\070\045\071\041\072\051\001\002\000\004\050\054\001" +
    "\002\000\004\007\055\001\002\000\010\011\056\012\061" +
    "\013\060\001\002\000\004\066\uffd4\001\002\000\004\066" +
    "\uffd6\001\002\000\004\066\uffd3\001\002\000\004\066\uffd5" +
    "\001\002\000\010\051\uffde\052\uffde\060\uffde\001\002\000" +
    "\016\003\021\010\uffe4\037\uffe4\054\024\062\uffe4\063\uffe4" +
    "\001\002\000\014\003\uffe1\010\uffe1\037\uffe1\062\uffe1\063" +
    "\uffe1\001\002\000\014\003\uffe2\010\uffe2\037\uffe2\062\uffe2" +
    "\063\uffe2\001\002\000\016\003\021\010\uffe4\037\uffe4\054" +
    "\024\062\uffe4\063\uffe4\001\002\000\014\003\uffe3\010\uffe3" +
    "\037\uffe3\062\uffe3\063\uffe3\001\002\000\030\003\105\004" +
    "\072\005\113\034\104\037\074\040\uffcf\041\073\044\110" +
    "\045\076\054\024\066\uffcf\001\002\000\006\003\ufff6\037" +
    "\ufff6\001\002\000\004\057\233\001\002\000\004\054\024" +
    "\001\002\000\030\003\105\004\072\005\113\034\104\037" +
    "\074\040\uffcf\041\073\044\110\045\076\054\024\066\uffcf" +
    "\001\002\000\014\003\223\036\uffcc\040\uffcc\046\uffcc\066" +
    "\uffcc\001\002\000\030\003\105\004\072\005\113\034\104" +
    "\037\074\041\073\044\110\045\076\046\uffcf\054\024\066" +
    "\uffcf\001\002\000\014\003\217\036\uffcb\040\uffcb\046\uffcb" +
    "\066\uffcb\001\002\000\014\003\uffc8\036\uffc8\040\uffc8\046" +
    "\uffc8\066\uffc8\001\002\000\014\003\216\036\uffc7\040\uffc7" +
    "\046\uffc7\066\uffc7\001\002\000\014\003\215\036\uffce\040" +
    "\uffce\046\uffce\066\uffce\001\002\000\004\040\214\001\002" +
    "\000\024\025\126\026\130\027\135\054\024\057\134\067" +
    "\047\070\045\071\041\072\051\001\002\000\036\003\105" +
    "\004\072\005\113\034\104\036\200\037\074\040\uffcf\041" +
    "\073\044\110\045\076\046\uffcf\054\024\060\201\066\uffcf" +
    "\001\002\000\014\003\205\036\uffcd\040\uffcd\046\uffcd\066" +
    "\uffcd\001\002\000\004\053\203\001\002\000\024\025\126" +
    "\026\130\027\135\054\024\057\134\067\047\070\045\071" +
    "\041\072\051\001\002\000\014\003\124\036\uffc9\040\uffc9" +
    "\046\uffc9\066\uffc9\001\002\000\014\003\121\036\uffd2\040" +
    "\uffd2\046\uffd2\066\122\001\002\000\004\057\116\001\002" +
    "\000\014\003\115\036\uffca\040\uffca\046\uffca\066\uffca\001" +
    "\002\000\014\003\uffb8\036\uffb8\040\uffb8\046\uffb8\066\uffb8" +
    "\001\002\000\004\054\024\001\002\000\004\060\120\001" +
    "\002\000\014\003\uffb4\036\uffb4\040\uffb4\046\uffb4\066\uffb4" +
    "\001\002\000\014\003\uffc6\036\uffc6\040\uffc6\046\uffc6\066" +
    "\uffc6\001\002\000\034\003\105\004\072\005\113\034\104" +
    "\036\uffcf\037\074\040\uffcf\041\073\044\110\045\076\046" +
    "\uffcf\054\024\066\uffcf\001\002\000\014\003\uffd1\036\uffd1" +
    "\040\uffd1\046\uffd1\066\uffd1\001\002\000\014\003\uffb3\036" +
    "\uffb3\040\uffb3\046\uffb3\066\uffb3\001\002\000\034\015\142" +
    "\016\150\017\141\020\155\021\152\022\145\026\137\027" +
    "\147\030\151\031\140\032\144\033\153\043\175\001\002" +
    "\000\024\025\uff9b\026\uff9b\027\uff9b\054\uff9b\057\uff9b\067" +
    "\uff9b\070\uff9b\071\uff9b\072\uff9b\001\002\000\056\003\uffab" +
    "\015\uffab\016\uffab\017\uffab\020\uffab\021\uffab\022\uffab\026" +
    "\uffab\027\uffab\030\uffab\031\uffab\032\uffab\033\uffab\035\uffab" +
    "\036\uffab\040\uffab\042\uffab\043\uffab\046\uffab\051\uffab\060" +
    "\uffab\066\uffab\001\002\000\024\025\uff9a\026\uff9a\027\uff9a" +
    "\054\uff9a\057\uff9a\067\uff9a\070\uff9a\071\uff9a\072\uff9a\001" +
    "\002\000\056\003\uffb2\015\uffb2\016\uffb2\017\uffb2\020\uffb2" +
    "\021\uffb2\022\uffb2\026\uffb2\027\uffb2\030\uffb2\031\uffb2\032" +
    "\uffb2\033\uffb2\035\uffb2\036\uffb2\040\uffb2\042\uffb2\043\uffb2" +
    "\046\uffb2\051\uffb2\060\uffb2\066\uffb2\001\002\000\024\025" +
    "\126\026\130\027\135\054\024\057\134\067\047\070\045" +
    "\071\041\072\051\001\002\000\060\003\uffb1\015\uffb1\016" +
    "\uffb1\017\uffb1\020\uffb1\021\uffb1\022\uffb1\026\uffb1\027\uffb1" +
    "\030\uffb1\031\uffb1\032\uffb1\033\uffb1\035\uffb1\036\uffb1\040" +
    "\uffb1\042\uffb1\043\uffb1\046\uffb1\051\uffb1\057\165\060\uffb1" +
    "\066\uffb1\001\002\000\024\025\126\026\130\027\135\054" +
    "\024\057\134\067\047\070\045\071\041\072\051\001\002" +
    "\000\024\025\uff99\026\uff99\027\uff99\054\uff99\057\uff99\067" +
    "\uff99\070\uff99\071\uff99\072\uff99\001\002\000\034\015\142" +
    "\016\150\017\141\020\155\021\152\022\145\026\137\027" +
    "\147\030\151\031\140\032\144\033\153\060\154\001\002" +
    "\000\024\025\uffa1\026\uffa1\027\uffa1\054\uffa1\057\uffa1\067" +
    "\uffa1\070\uffa1\071\uffa1\072\uffa1\001\002\000\024\025\uff9d" +
    "\026\uff9d\027\uff9d\054\uff9d\057\uff9d\067\uff9d\070\uff9d\071" +
    "\uff9d\072\uff9d\001\002\000\024\025\uffa5\026\uffa5\027\uffa5" +
    "\054\uffa5\057\uffa5\067\uffa5\070\uffa5\071\uffa5\072\uffa5\001" +
    "\002\000\024\025\uffa7\026\uffa7\027\uffa7\054\uffa7\057\uffa7" +
    "\067\uffa7\070\uffa7\071\uffa7\072\uffa7\001\002\000\024\025" +
    "\126\026\130\027\135\054\024\057\134\067\047\070\045" +
    "\071\041\072\051\001\002\000\024\025\uff9e\026\uff9e\027" +
    "\uff9e\054\uff9e\057\uff9e\067\uff9e\070\uff9e\071\uff9e\072\uff9e" +
    "\001\002\000\024\025\uffa3\026\uffa3\027\uffa3\054\uffa3\057" +
    "\uffa3\067\uffa3\070\uffa3\071\uffa3\072\uffa3\001\002\000\024" +
    "\025\126\026\130\027\135\054\024\057\134\067\047\070" +
    "\045\071\041\072\051\001\002\000\024\025\uffa0\026\uffa0" +
    "\027\uffa0\054\uffa0\057\uffa0\067\uffa0\070\uffa0\071\uffa0\072" +
    "\uffa0\001\002\000\024\025\uffa6\026\uffa6\027\uffa6\054\uffa6" +
    "\057\uffa6\067\uffa6\070\uffa6\071\uffa6\072\uffa6\001\002\000" +
    "\024\025\uff9f\026\uff9f\027\uff9f\054\uff9f\057\uff9f\067\uff9f" +
    "\070\uff9f\071\uff9f\072\uff9f\001\002\000\024\025\uffa2\026" +
    "\uffa2\027\uffa2\054\uffa2\057\uffa2\067\uffa2\070\uffa2\071\uffa2" +
    "\072\uffa2\001\002\000\024\025\uff9c\026\uff9c\027\uff9c\054" +
    "\uff9c\057\uff9c\067\uff9c\070\uff9c\071\uff9c\072\uff9c\001\002" +
    "\000\062\003\uffa9\015\uffa9\016\uffa9\017\uffa9\020\uffa9\021" +
    "\uffa9\022\uffa9\023\157\024\160\026\uffa9\027\uffa9\030\uffa9" +
    "\031\uffa9\032\uffa9\033\uffa9\035\uffa9\036\uffa9\040\uffa9\042" +
    "\uffa9\043\uffa9\046\uffa9\051\uffa9\060\uffa9\066\uffa9\001\002" +
    "\000\024\025\uffa4\026\uffa4\027\uffa4\054\uffa4\057\uffa4\067" +
    "\uffa4\070\uffa4\071\uffa4\072\uffa4\001\002\000\004\057\134" +
    "\001\002\000\004\057\uff98\001\002\000\004\057\uff97\001" +
    "\002\000\056\003\uffaa\015\uffaa\016\uffaa\017\uffaa\020\uffaa" +
    "\021\uffaa\022\uffaa\026\uffaa\027\uffaa\030\uffaa\031\uffaa\032" +
    "\uffaa\033\uffaa\035\uffaa\036\uffaa\040\uffaa\042\uffaa\043\uffaa" +
    "\046\uffaa\051\uffaa\060\uffaa\066\uffaa\001\002\000\056\003" +
    "\uffa8\015\uffa8\016\uffa8\017\uffa8\020\uffa8\021\uffa8\022\uffa8" +
    "\026\uffa8\027\uffa8\030\uffa8\031\uffa8\032\uffa8\033\uffa8\035" +
    "\uffa8\036\uffa8\040\uffa8\042\uffa8\043\uffa8\046\uffa8\051\uffa8" +
    "\060\uffa8\066\uffa8\001\002\000\056\003\uffad\015\142\016" +
    "\150\017\141\020\155\021\152\022\145\026\137\027\147" +
    "\030\151\031\140\032\144\033\153\035\uffad\036\uffad\040" +
    "\uffad\042\uffad\043\uffad\046\uffad\051\uffad\060\uffad\066\uffad" +
    "\001\002\000\056\003\uffae\015\142\016\150\017\141\020" +
    "\155\021\152\022\145\026\137\027\147\030\151\031\140" +
    "\032\144\033\153\035\uffae\036\uffae\040\uffae\042\uffae\043" +
    "\uffae\046\uffae\051\uffae\060\uffae\066\uffae\001\002\000\026" +
    "\025\126\026\130\027\135\054\024\057\134\060\170\067" +
    "\047\070\045\071\041\072\051\001\002\000\004\060\173" +
    "\001\002\000\036\015\142\016\150\017\141\020\155\021" +
    "\152\022\145\026\137\027\147\030\151\031\140\032\144" +
    "\033\153\051\171\060\uff96\001\002\000\056\003\uffaf\015" +
    "\uffaf\016\uffaf\017\uffaf\020\uffaf\021\uffaf\022\uffaf\026\uffaf" +
    "\027\uffaf\030\uffaf\031\uffaf\032\uffaf\033\uffaf\035\uffaf\036" +
    "\uffaf\040\uffaf\042\uffaf\043\uffaf\046\uffaf\051\uffaf\060\uffaf" +
    "\066\uffaf\001\002\000\024\025\126\026\130\027\135\054" +
    "\024\057\134\067\047\070\045\071\041\072\051\001\002" +
    "\000\004\060\uff95\001\002\000\056\003\uffb0\015\uffb0\016" +
    "\uffb0\017\uffb0\020\uffb0\021\uffb0\022\uffb0\026\uffb0\027\uffb0" +
    "\030\uffb0\031\uffb0\032\uffb0\033\uffb0\035\uffb0\036\uffb0\040" +
    "\uffb0\042\uffb0\043\uffb0\046\uffb0\051\uffb0\060\uffb0\066\uffb0" +
    "\001\002\000\056\003\uffac\015\142\016\150\017\141\020" +
    "\155\021\152\022\145\026\137\027\147\030\151\031\140" +
    "\032\144\033\153\035\uffac\036\uffac\040\uffac\042\uffac\043" +
    "\uffac\046\uffac\051\uffac\060\uffac\066\uffac\001\002\000\034" +
    "\003\176\004\072\005\113\034\104\036\uffcf\037\074\040" +
    "\uffcf\041\073\044\110\045\076\046\uffcf\054\024\066\uffcf" +
    "\001\002\000\006\036\200\060\201\001\002\000\014\003" +
    "\121\036\uffbb\040\uffbb\046\uffbb\066\uffbb\001\002\000\034" +
    "\003\176\004\072\005\113\034\104\036\uffcf\037\074\040" +
    "\uffcf\041\073\044\110\045\076\046\uffcf\054\024\066\uffcf" +
    "\001\002\000\014\003\uffb5\036\uffb5\040\uffb5\046\uffb5\066" +
    "\uffb5\001\002\000\014\003\121\036\uffbe\040\uffbe\046\uffbe" +
    "\066\uffbe\001\002\000\024\025\126\026\130\027\135\054" +
    "\024\057\134\067\047\070\045\071\041\072\051\001\002" +
    "\000\046\003\uffc3\015\142\016\150\017\141\020\155\021" +
    "\152\022\145\026\137\027\147\030\151\031\140\032\144" +
    "\033\153\036\uffc3\040\uffc3\042\uffc3\046\uffc3\066\uffc3\001" +
    "\002\000\014\003\uffbf\036\uffbf\040\uffbf\046\uffbf\066\uffbf" +
    "\001\002\000\014\003\uffd0\036\uffd0\040\uffd0\046\uffd0\066" +
    "\uffd0\001\002\000\034\015\142\016\150\017\141\020\155" +
    "\021\152\022\145\026\137\027\147\030\151\031\140\032" +
    "\144\033\153\035\210\001\002\000\034\003\176\004\072" +
    "\005\113\034\104\036\uffcf\037\074\040\uffcf\041\073\044" +
    "\110\045\076\046\uffcf\054\024\066\uffcf\001\002\000\014" +
    "\003\121\036\212\040\uffc0\046\uffc0\066\uffc0\001\002\000" +
    "\034\003\176\004\072\005\113\034\104\036\uffcf\037\074" +
    "\040\uffcf\041\073\044\110\045\076\046\uffcf\054\024\066" +
    "\uffcf\001\002\000\014\003\121\036\uffc1\040\uffc1\046\uffc1" +
    "\066\uffc1\001\002\000\006\003\ufffc\065\ufffc\001\002\000" +
    "\016\003\uffc2\036\uffc2\040\uffc2\042\uffc2\046\uffc2\066\uffc2" +
    "\001\002\000\014\003\uffc4\036\uffc4\040\uffc4\046\uffc4\066" +
    "\uffc4\001\002\000\014\003\uffba\036\uffba\040\uffba\046\uffba" +
    "\066\uffba\001\002\000\004\046\221\001\002\000\024\025" +
    "\126\026\130\027\135\054\024\057\134\067\047\070\045" +
    "\071\041\072\051\001\002\000\044\003\uffb9\015\142\016" +
    "\150\017\141\020\155\021\152\022\145\026\137\027\147" +
    "\030\151\031\140\032\144\033\153\036\uffb9\040\uffb9\046" +
    "\uffb9\066\uffb9\001\002\000\014\003\uffbc\036\uffbc\040\uffbc" +
    "\046\uffbc\066\uffbc\001\002\000\004\040\225\001\002\000" +
    "\014\003\uffc5\036\uffc5\040\uffc5\046\uffc5\066\uffc5\001\002" +
    "\000\006\003\215\042\227\001\002\000\024\025\126\026" +
    "\130\027\135\054\024\057\134\067\047\070\045\071\041" +
    "\072\051\001\002\000\034\015\142\016\150\017\141\020" +
    "\155\021\152\022\145\026\137\027\147\030\151\031\140" +
    "\032\144\033\153\043\231\001\002\000\034\003\105\004" +
    "\072\005\113\034\104\036\uffcf\037\074\040\uffcf\041\073" +
    "\044\110\045\076\046\uffcf\054\024\066\uffcf\001\002\000" +
    "\014\003\uffbd\036\uffbd\040\uffbd\046\uffbd\066\uffbd\001\002" +
    "\000\004\072\051\001\002\000\006\051\235\060\236\001" +
    "\002\000\004\054\024\001\002\000\014\003\uffb7\036\uffb7" +
    "\040\uffb7\046\uffb7\066\uffb7\001\002\000\004\060\240\001" +
    "\002\000\014\003\uffb6\036\uffb6\040\uffb6\046\uffb6\066\uffb6" +
    "\001\002\000\006\003\071\037\ufff7\001\002\000\014\003" +
    "\ufff2\010\ufff2\037\ufff2\062\ufff2\063\ufff2\001\002\000\006" +
    "\003\ufffb\065\ufffb\001\002\000\004\002\ufffe\001\002\000" +
    "\004\057\247\001\002\000\014\003\uffec\010\uffec\037\uffec" +
    "\062\uffec\063\uffec\001\002\000\010\010\254\054\024\060" +
    "\252\001\002\000\006\060\uffe8\066\302\001\002\000\004" +
    "\060\276\001\002\000\004\066\262\001\002\000\006\051" +
    "\026\052\260\001\002\000\004\054\024\001\002\000\006" +
    "\051\026\052\256\001\002\000\012\011\032\012\037\013" +
    "\036\014\034\001\002\000\006\060\uffe6\066\uffe6\001\002" +
    "\000\012\011\032\012\037\013\036\014\034\001\002\000" +
    "\006\060\uffe5\066\uffe5\001\002\000\006\010\266\037\uffeb" +
    "\001\002\000\006\003\274\066\275\001\002\000\004\037" +
    "\271\001\002\000\006\010\266\037\uffeb\001\002\000\012" +
    "\003\021\010\uffe4\037\uffe4\054\024\001\002\000\006\010" +
    "\uffe9\037\uffe9\001\002\000\004\037\uffea\001\002\000\030" +
    "\003\105\004\072\005\113\034\104\037\074\040\uffcf\041" +
    "\073\044\110\045\076\054\024\066\uffcf\001\002\000\004" +
    "\040\273\001\002\000\006\003\ufffa\066\ufffa\001\002\000" +
    "\006\003\ufff9\066\ufff9\001\002\000\014\003\uffed\010\uffed" +
    "\037\uffed\062\uffed\063\uffed\001\002\000\004\066\277\001" +
    "\002\000\006\010\266\037\uffeb\001\002\000\006\003\274" +
    "\066\301\001\002\000\014\003\uffee\010\uffee\037\uffee\062" +
    "\uffee\063\uffee\001\002\000\006\010\254\054\024\001\002" +
    "\000\004\060\uffe7\001\002\000\014\003\uffef\010\uffef\037" +
    "\uffef\062\uffef\063\uffef\001\002\000\004\057\306\001\002" +
    "\000\010\010\254\054\024\060\310\001\002\000\004\060" +
    "\316\001\002\000\004\052\311\001\002\000\014\006\035" +
    "\011\032\012\037\013\036\014\034\001\002\000\004\066" +
    "\313\001\002\000\006\010\266\037\uffeb\001\002\000\006" +
    "\003\274\066\315\001\002\000\014\003\ufff0\010\ufff0\037" +
    "\ufff0\062\ufff0\063\ufff0\001\002\000\004\052\317\001\002" +
    "\000\014\006\035\011\032\012\037\013\036\014\034\001" +
    "\002\000\004\066\321\001\002\000\006\010\266\037\uffeb" +
    "\001\002\000\006\003\274\066\323\001\002\000\014\003" +
    "\ufff1\010\ufff1\037\ufff1\062\ufff1\063\ufff1\001\002\000\004" +
    "\002\000\001\002\000\006\057\326\066\327\001\002\000" +
    "\004\054\024\001\002\000\014\003\014\010\017\037\ufff8" +
    "\062\010\063\007\001\002\000\006\003\331\065\332\001" +
    "\002\000\004\002\ufffd\001\002\000\004\002\001\001\002" +
    "\000\006\051\026\060\334\001\002\000\004\066\335\001" +
    "\002\000\014\003\014\010\017\037\ufff8\062\010\063\007" +
    "\001\002\000\004\065\337\001\002\000\004\002\uffff\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\335\000\004\004\004\001\001\000\004\027\324\001" +
    "\001\000\002\001\001\000\014\005\011\007\015\010\014" +
    "\014\010\017\012\001\001\000\004\027\304\001\001\000" +
    "\004\027\244\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\007\240\010" +
    "\014\014\010\017\012\001\001\000\002\001\001\000\012" +
    "\011\024\012\017\026\022\027\021\001\001\000\002\001" +
    "\001\000\012\011\063\012\017\026\022\027\021\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\027\061\001\001\000\010\022\032" +
    "\023\027\024\030\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\003\045\050\041\051\043\052\047\053\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\003" +
    "\052\050\041\051\043\052\047\053\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\025\056\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\011\064\012\017\026" +
    "\022\027\021\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\011\066\012\017\026\022\027\021\001\001\000" +
    "\002\001\001\000\030\013\074\027\106\037\102\040\111" +
    "\041\101\042\105\043\076\044\113\045\100\046\077\047" +
    "\110\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\027\106\041\225\001\001\000\030\013\074\027\106\037" +
    "\223\040\111\041\101\042\105\043\076\044\113\045\100" +
    "\046\077\047\110\001\001\000\002\001\001\000\030\013" +
    "\074\027\106\037\217\040\111\041\101\042\105\043\076" +
    "\044\113\045\100\046\077\047\110\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\002\206\003\130\027\132\031" +
    "\126\035\131\050\041\051\043\052\047\053\042\001\001" +
    "\000\030\013\074\027\106\037\205\040\111\041\101\042" +
    "\105\043\076\044\113\045\100\046\077\047\110\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\002\124\003" +
    "\130\027\132\031\126\035\131\050\041\051\043\052\047" +
    "\053\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\027\116\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\013\074\027\106\037\122\040\111" +
    "\041\101\042\105\043\076\044\113\045\100\046\077\047" +
    "\110\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\033\142\034\145\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\002\173" +
    "\003\130\027\132\031\126\035\131\050\041\051\043\052" +
    "\047\053\042\001\001\000\002\001\001\000\024\002\135" +
    "\003\130\027\132\031\126\035\131\050\041\051\043\052" +
    "\047\053\042\001\001\000\002\001\001\000\006\033\142" +
    "\034\145\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\002\163\003\130" +
    "\027\132\031\126\035\131\050\041\051\043\052\047\053" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\002\162\003\130\027\132\031\126\035\131\050\041\051" +
    "\043\052\047\053\042\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\032\160\036\155\001\001\000\002\001\001" +
    "\000\004\031\161\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\033\142" +
    "\034\145\001\001\000\006\033\142\034\145\001\001\000" +
    "\026\002\166\003\130\027\132\030\165\031\126\035\131" +
    "\050\041\051\043\052\047\053\042\001\001\000\002\001" +
    "\001\000\006\033\142\034\145\001\001\000\002\001\001" +
    "\000\026\002\166\003\130\027\132\030\171\031\126\035" +
    "\131\050\041\051\043\052\047\053\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\033\142\034\145\001" +
    "\001\000\026\013\074\027\106\040\176\041\101\042\105" +
    "\043\076\044\113\045\100\046\077\047\110\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\013\074\027\106" +
    "\040\201\041\101\042\105\043\076\044\113\045\100\046" +
    "\077\047\110\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\002\203\003\130\027\132\031\126\035\131\050" +
    "\041\051\043\052\047\053\042\001\001\000\006\033\142" +
    "\034\145\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\033\142\034\145\001\001\000\026\013\074\027\106" +
    "\040\210\041\101\042\105\043\076\044\113\045\100\046" +
    "\077\047\110\001\001\000\002\001\001\000\026\013\074" +
    "\027\106\040\212\041\101\042\105\043\076\044\113\045" +
    "\100\046\077\047\110\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\002\221\003\130\027\132" +
    "\031\126\035\131\050\041\051\043\052\047\053\042\001" +
    "\001\000\006\033\142\034\145\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\002\227\003\130\027\132\031\126\035\131\050\041" +
    "\051\043\052\047\053\042\001\001\000\006\033\142\034" +
    "\145\001\001\000\030\013\074\027\106\037\231\040\111" +
    "\041\101\042\105\043\076\044\113\045\100\046\077\047" +
    "\110\001\001\000\002\001\001\000\004\053\233\001\001" +
    "\000\002\001\001\000\004\027\236\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\015\250\016\247" +
    "\026\252\027\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\026\254" +
    "\027\021\001\001\000\002\001\001\000\004\023\256\001" +
    "\001\000\002\001\001\000\004\023\260\001\001\000\002" +
    "\001\001\000\010\006\262\020\263\021\264\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\020\267\021\264" +
    "\001\001\000\012\011\266\012\017\026\022\027\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\013\074" +
    "\027\106\037\271\040\111\041\101\042\105\043\076\044" +
    "\113\045\100\046\077\047\110\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\006\277\020\263\021\264\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\015\302\016" +
    "\247\026\252\027\021\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\015\306\016\247\026" +
    "\252\027\021\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\022\311\023\027\024\030\001\001\000\002\001" +
    "\001\000\010\006\313\020\263\021\264\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\022" +
    "\317\023\027\024\030\001\001\000\002\001\001\000\010" +
    "\006\321\020\263\021\264\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\026\332\027\021\001\001\000\014\005\327\007\015\010" +
    "\014\014\010\017\012\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\005\335\007\015\010\014\014\010\017\012" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



        
        @Override
	public void report_error(String message, Object info) {
            System.err.print("Syntax error: " ); 
            expected();
            System.err.println("pero se encontró el token \'" + ((Symbol)info).value + "\' en la Linea: " + ((Symbol)info).left + ", Columna: " + ((Symbol)info).right + ". " ); 
        }

        @Override
	public void syntax_error(Symbol s){
            System.err.print("Error Sintáctico: " ); 
            expected();
            System.err.println("pero se encontró el token \'" + sym.terminalNames[s.sym] + "\' en la Linea: " + s.left + ", Columna: " + s.right + ". " ); 
	}

        public void expected(){
            List<Integer> token_list = this.expected_token_ids();
            if (token_list.size() <= 0){
                    token_list = this.expected_token_ids();
            }
            String expected_tokens = "";
            for (int i = 0 ; i < token_list.size(); i++){
                    int id = token_list.get(i);
                    if (id == 1){ //error
                        continue;
                    }
                    String terminal_name = sym.terminalNames[id];
                    if (i == token_list.size() - 1){
                        expected_tokens += terminal_name;
                    }else{
                        expected_tokens += terminal_name + " , ";
                    }
            }
            System.err.print("Se esperaba alguno de los siguientes tokens: [" + expected_tokens + "] ");
        };

        public void report_fatal_error(String message, Object info) {
            throw new Error("Error Fatal Sintáctico, no se pudo recuperar del problema.");
        }

        public void unrecovered_syntax_error(Symbol s) {
        }

        @Override
        public int error_sync_size(){
            return 1;
        }
        


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {


        /* Contruccion del arbol en XML */

        Document xmlDocument = null;    
        Element nodoPadre = null; 

        private void iniXML() {
        if (xmlDocument == null) {
            try {
                DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
                DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
                xmlDocument = docBuilder.newDocument();//Crear el documento XML
            } catch (Exception e) {
                System.err.println("el Arbol tiene ERROR: " + e.getMessage());
            }
        }
    }

    public void escribirXML() throws javax.xml.transform.TransformerConfigurationException, javax.xml.transform.TransformerException {
        //Escribir el archivo XML         
        xmlDocument.appendChild(nodoPadre);
        TransformerFactory transformerFactory = TransformerFactory.newInstance();
        Transformer transformer = transformerFactory.newTransformer();
        DOMSource origen = new DOMSource(xmlDocument);
        StreamResult result = new StreamResult(new File("AST.xml"));
        transformer.transform(origen, result);
    }

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= Program var PuntoComa block Punto 
            {
              Element RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Element v = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element b = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    iniXML();
                    nodoPadre = xmlDocument.createElement("Program"); 
                    if (v != null) { nodoPadre.appendChild(v); }
                    if(b != null) { nodoPadre.appendChild(b); }
                    escribirXML();
                    SemanticParser.llenarTablaSimbolos(nodoPadre);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element start_val = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= Program var ParentesisAbrir vars ParentesisCerrar PuntoComa block Punto 
            {
              Element RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Element v1 = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int vsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Element vs = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element b = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    iniXML();
                    nodoPadre = xmlDocument.createElement("Program"); 
                    if (v1 != null) { nodoPadre.appendChild(v1); }
                    if (vs != null) { 
                        Element nPadre = xmlDocument.createElement("ProgramArgs");
                        ArrayList<Element> asd = new ArrayList();
                        NodeList temp = vs.getChildNodes();
                        if (temp.getLength() > 0) {
                            Node parent = temp.item((temp.getLength() - 1)).getParentNode();
                            asd.add((Element) parent);
                        }
                        for (int i = 0; i < temp.getLength(); i++) {
                            asd.add((Element) temp.item(i));
                        }
                        for (int i = 0; i < asd.size(); i++) {
                            nPadre.appendChild(asd.get(i));
                        }
                        nodoPadre.appendChild(nPadre);
                    }
                    if(b != null) { nodoPadre.appendChild(b); }
                    escribirXML();
                    SemanticParser.llenarTablaSimbolos(nodoPadre);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= error block Punto 
            {
              Element RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // program ::= Program var PuntoComa block error 
            {
              Element RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Element v = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element b = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // block ::= decls Begin stmts End 
            {
              Element RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Element d = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Block");
                    if (d != null) { nPadre.appendChild(d); }
                    if (s != null) { nPadre.appendChild(s); }
                    RESULT = nPadre;                    
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // block ::= error End 
            {
              Element RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // blockProc ::= procInlineDecls Begin stmts End 
            {
              Element RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Element p = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Block");
                    if (p != null) { nPadre.appendChild(p); }
                    if (s != null) { nPadre.appendChild(s); }
                    RESULT = nPadre;                    
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("blockProc",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // blockProc ::= blockProc error 
            {
              Element RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("blockProc",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // decls ::= 
            {
              Element RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decls",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // decls ::= decl decls 
            {
              Element RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element d = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element ds = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Declarations");
                    if (d != null && ds == null) {
                        RESULT = d;
                    } else if (d == null && ds != null){
                        RESULT = ds;
                    } else if (d != null && ds != null) {
                        nPadre.appendChild(d);
                        if (!ds.getNodeName().equals("Declarations")) {
                            nPadre.appendChild(ds);
                        }else{
                            Element nodoPadre = xmlDocument.createElement("ProgramArgs");
                            ArrayList<Element> asd = new ArrayList();
                            NodeList temp = ds.getChildNodes();
                            for (int i = 0; i < temp.getLength(); i++) {
                                asd.add((Element) temp.item(i));
                            }
                            for (int i = 0; i < asd.size(); i++) {
                                nPadre.appendChild(asd.get(i));
                            }
                            nodoPadre.appendChild(nPadre);
                        }
                       
                        RESULT = nPadre;

                    } else RESULT = null;      
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decls",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // decls ::= decls error 
            {
              Element RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element ds = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decls",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // decl ::= Var vardecls 
            {
              Element RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element vd = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    RESULT = vd;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // decl ::= functionDecl 
            {
              Element RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element f = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    RESULT = f;
                                        
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // decl ::= procedureDecl 
            {
              Element RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element p = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    RESULT = p;                   
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // decl ::= decl error 
            {
              Element RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element d = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // functionDecl ::= Function var ParentesisAbrir inlineArgs ParentesisCerrar DosPuntos type PuntoComa blockProc PuntoComa 
            {
              Element RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Element i = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Element in = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Element t = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element b = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("FunctionDeclaration");
                    nPadre.setAttribute("ID", i.getAttribute("Value"));
                    if (in != null) { nPadre.appendChild(in); }
                    if (t != null) { nPadre.appendChild(t); }
                    if (b != null) { nPadre.appendChild(b); }

                    RESULT = nPadre;                    
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functionDecl",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // functionDecl ::= Function var ParentesisAbrir ParentesisCerrar DosPuntos type PuntoComa blockProc PuntoComa 
            {
              Element RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Element i = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Element t = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element b = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("FunctionDeclaration");
                    nPadre.setAttribute("ID", i.getAttribute("Value"));
                    if (t != null) { nPadre.appendChild(t); }
                    if (b != null) { nPadre.appendChild(b); }

                    RESULT = nPadre;                    
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functionDecl",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // functionDecl ::= Function error 
            {
              Element RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functionDecl",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // procedureDecl ::= Procedure var ParentesisAbrir inlineArgs ParentesisCerrar PuntoComa blockProc PuntoComa 
            {
              Element RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Element i = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Element in = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element b = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("ProcedureDeclaration");
                    nPadre.setAttribute("ID", i.getAttribute("Value"));
                    if (in != null) { nPadre.appendChild(in); }
                    if (b != null) { nPadre.appendChild(b); }

                    RESULT = nPadre;                    
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedureDecl",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // procedureDecl ::= Procedure var ParentesisAbrir ParentesisCerrar PuntoComa blockProc PuntoComa 
            {
              Element RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Element i = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element b = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    iniXML(); 
                    Element nPadre = xmlDocument.createElement("ProcedureDeclaration");
                    nPadre.setAttribute("ID", i.getAttribute("Value"));
                    if (b != null) { nPadre.appendChild(b); }

                    RESULT = nPadre;                    
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedureDecl",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // procedureDecl ::= Procedure error 
            {
              Element RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedureDecl",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // procInlineDecls ::= 
            {
              Element RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procInlineDecls",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // procInlineDecls ::= procInlineDecl procInlineDecls 
            {
              Element RESULT =null;
		int pdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element pd = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element pds = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("ProcInlinceDecls");
                    if (pd != null && pds == null) {
                        RESULT = pd;
                    } else if(pd == null && pds != null) {
                        RESULT = pds;
                    } else if(pd != null && pds != null) {
                        nPadre.appendChild(pd);
                        nPadre.appendChild(pds);
                        RESULT = nPadre;
                    } else RESULT = null;               
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procInlineDecls",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // procInlineDecl ::= Var vardecls 
            {
              Element RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element vd = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    RESULT = vd;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procInlineDecl",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // inlineArgs ::= inlineArg 
            {
              Element RESULT =null;
		int ialeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element ia = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    RESULT = ia;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inlineArgs",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // inlineArgs ::= inlineArg PuntoComa inlineArgs 
            {
              Element RESULT =null;
		int ialeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Element ia = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int iasleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iasright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element ias = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Arguments");
                    nPadre.appendChild(ia);
                    nPadre.appendChild(ias);
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inlineArgs",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // inlineArg ::= Var vars DosPuntos identtype 
            {
              Element RESULT =null;
		int vsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Element vs = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("inlineArg");
                    if(vs != null) {
                        ArrayList<Element> asd = new ArrayList();
                        if (!vs.hasChildNodes()) {
                            nPadre.appendChild(vs);
                        } else {
                            NodeList temp = vs.getChildNodes();
                            if (temp.getLength() > 0) {
                                Node parent = temp.item((temp.getLength() - 1)).getParentNode();
                                asd.add((Element) parent);
                            }
                            for (int i = 0; i < temp.getLength(); i++) {
                                asd.add((Element) temp.item(i));
                            }
                            for (int i = 0; i < asd.size(); i++) {
                                nPadre.appendChild(asd.get(i));
                            }
                        }
                    }
                    if( t != null ) {
                        Element nType = xmlDocument.createElement("Type");
                        nType.setAttribute("Value",t);
                        nPadre.appendChild(nType);                        
                    }
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inlineArg",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // inlineArg ::= vars DosPuntos identtype 
            {
              Element RESULT =null;
		int vsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Element vs = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("inlineArg");
                    if(vs != null) {
                       ArrayList<Element> asd = new ArrayList();
                        if (!vs.hasChildNodes()) {
                            nPadre.appendChild(vs);
                        } else {
                            NodeList temp = vs.getChildNodes();
                            if (temp.getLength() > 0) {
                                Node parent = temp.item((temp.getLength() - 1)).getParentNode();
                                asd.add((Element) parent);
                            }
                            for (int i = 0; i < temp.getLength(); i++) {
                                asd.add((Element) temp.item(i));
                            }
                            for (int i = 0; i < asd.size(); i++) {
                                nPadre.appendChild(asd.get(i));
                            }
                        }
                    }
                    if( t != null ) {
                        Element nType = xmlDocument.createElement("Type");
                        nType.setAttribute("Value",t);
                        nPadre.appendChild(nType);                        
                    }
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inlineArg",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // vardecls ::= 
            {
              Element RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vardecls",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // vardecls ::= vardecl PuntoComa vardecls 
            {
              Element RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Element v = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element vs = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    if(v != null && vs == null ){
                        RESULT = v;
                    } else if(v == null && vs != null){
                        RESULT = vs;
                    } else if(v != null && vs != null){
                        vs.appendChild(v);
                        RESULT = vs;
                    } else RESULT = null;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vardecls",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // vardecls ::= error PuntoComa vardecls 
            {
              Element RESULT =null;
		int vsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element vs = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vardecls",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // vardecls ::= error vardecls 
            {
              Element RESULT =null;
		int vsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element vs = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vardecls",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // vardecl ::= vars DosPuntos type 
            {
              Element RESULT =null;
		int vsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Element vs = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element t = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("VarDeclaration");
                    if (vs != null) { 
                        ArrayList<Element> asd = new ArrayList();
                        if (!vs.hasChildNodes()) {
                            nPadre.appendChild(vs);
                        } else {
                            NodeList temp = vs.getChildNodes();
                            if (temp.getLength() > 0) {
                                Node parent = temp.item((temp.getLength() - 1)).getParentNode();
                                asd.add((Element) parent);
                            }
                            for (int i = 0; i < temp.getLength(); i++) {
                                asd.add((Element) temp.item(i));
                            }
                            for (int i = 0; i < asd.size(); i++) {
                                nPadre.appendChild(asd.get(i));
                            }
                        }
                    }
                    nPadre.appendChild(t);
                    RESULT = nPadre;                    
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vardecl",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // vars ::= var 
            {
              Element RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element v = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    RESULT = v;                    
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vars",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // vars ::= vars Coma var 
            {
              Element RESULT =null;
		int vsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Element vs = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element v = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    vs.appendChild(v);
                    RESULT = vs;                    
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vars",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // var ::= Identificador 
            {
              Element RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("ID");
                    nPadre.setAttribute("Value",i);            
                    RESULT = nPadre;                    
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // type ::= identtype 
            {
              Element RESULT =null;
		int itleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int itright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String it = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Type");
                    if(it != null) {
                        nPadre.setAttribute("Value",it);
                        RESULT = nPadre;
                    } else RESULT = null;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // type ::= arraytype 
            {
              Element RESULT =null;
		int atsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int atsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element ats = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Type");
                    if(ats != null) {
                        nPadre.appendChild(ats);
                        RESULT = nPadre;
                    } else RESULT = null;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // identtype ::= TipoChar 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   RESULT = c;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identtype",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // identtype ::= TipoString 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   RESULT = c;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identtype",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // identtype ::= TipoBoolean 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   RESULT = c;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identtype",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // identtype ::= TipoInteger 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   RESULT = c;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identtype",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // arraytype ::= Array BracketAbrir literal PuntoPunto literal BracketCerrar Of arrayidenttype 
            {
              Element RESULT =null;
		int l1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Element l1 = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Element l2 = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
                    iniXML();
                    Element nPadre = xmlDocument.createElement("ArrayType");
                    if(l1 != null){nPadre.appendChild(l1);}
                    if(l2 != null){nPadre.appendChild(l2);}
                    if(t != null){nPadre.setAttribute("Type",t);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arraytype",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // arrayidenttype ::= TipoChar 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   RESULT = c;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arrayidenttype",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // arrayidenttype ::= TipoBoolean 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   RESULT = c;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arrayidenttype",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // arrayidenttype ::= TipoInteger 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   RESULT = c;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arrayidenttype",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // stmts ::= stmt 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Statements");
                    if (s != null) { nPadre.appendChild(s); RESULT = nPadre;}
                    
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // stmts ::= stmt PuntoComa stmts 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element ss = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    Element nPadre = xmlDocument.createElement("Statements");
                    iniXML();
                    if(s != null && ss == null){
                        RESULT = s;
                    } else if(s == null && ss != null){
                        RESULT = ss;
                    } else if(s != null && ss != null){
                        nPadre.appendChild(s);
                        nPadre.appendChild(ss);
                        RESULT = nPadre;
                    } else RESULT = null;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // stmts ::= error stmts 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // stmt ::= 
            {
              Element RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // stmt ::= assignstmt 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();               
                    RESULT = s;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // stmt ::= ifstmt 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();              
                    RESULT = s;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // stmt ::= forstmt 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();             
                    RESULT = s;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // stmt ::= whilestmt 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();   
                    RESULT = s;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // stmt ::= repeatstmt 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();          
                    RESULT = s;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // stmt ::= readstmt 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();          
                    RESULT = s;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // stmt ::= writestmt 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();       
                    RESULT = s;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // stmt ::= blockstmt 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();             
                    RESULT = s;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // stmt ::= stmt error 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // blockstmt ::= Begin stmts End 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Body");
                    if (s != null) { nPadre.appendChild(s); }             
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("blockstmt",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // blockstmt ::= blockstmt error 
            {
              Element RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("blockstmt",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // assignstmt ::= var DosPuntosIgual expr 
            {
              Element RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Element i = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Assignment");
                    if (i != null) { nPadre.appendChild(i); }
                    if (e != null) { nPadre.appendChild(e); }                   
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignstmt",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // assignstmt ::= assignstmt error 
            {
              Element RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignstmt",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ifstmt ::= If expr Then stmt Else stmt 
            {
              Element RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element s2 = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("IfStatement");
                    if (e != null) { nPadre.appendChild(e); }         
                    if (s != null) { nPadre.appendChild(s); }
                    if (s2 != null) { nPadre.appendChild(s2); }
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifstmt",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ifstmt ::= If expr Then stmt 
            {
              Element RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("IfStatement");
                    if (e != null) { nPadre.appendChild(e); }         
                    if (s != null) { nPadre.appendChild(s); }
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifstmt",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ifstmt ::= ifstmt error 
            {
              Element RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifstmt",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ifstmt ::= error Else stmt 
            {
              Element RESULT =null;
		int s2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element s2 = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifstmt",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // forstmt ::= For assignstmt To expr Do stmts 
            {
              Element RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Element a = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("ForStatement");
                    if (a != null) { nPadre.appendChild(a); }
                    if (e != null) { nPadre.appendChild(e); }
                    if (s != null) { nPadre.appendChild(s); }
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("forstmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // forstmt ::= forstmt error 
            {
              Element RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("forstmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // whilestmt ::= While expr Do stmt 
            {
              Element RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("WhileStatement");
                    if (e != null) { nPadre.appendChild(e); }
                    if (s != null) { nPadre.appendChild(s); }
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("whilestmt",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // whilestmt ::= whilestmt error 
            {
              Element RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("whilestmt",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // repeatstmt ::= Repeat stmts Until expr 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("RepeatStatement");
                    if (s != null) { nPadre.appendChild(s); }
                    if (e != null) { nPadre.appendChild(e); }
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("repeatstmt",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // repeatstmt ::= repeatstmt error 
            {
              Element RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("repeatstmt",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // writestmt ::= Write ParentesisAbrir string ParentesisCerrar 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("WriteStatement");
                    if (s != null) { nPadre.appendChild(s); }
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("writestmt",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // writestmt ::= Write ParentesisAbrir string Coma var ParentesisCerrar 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element v = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("WriteStatement");
                    if (s != null) { nPadre.appendChild(s); }
                    if (v != null) { nPadre.appendChild(v); }
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("writestmt",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // writestmt ::= error ParentesisCerrar 
            {
              Element RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("writestmt",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // readstmt ::= Read ParentesisAbrir var ParentesisCerrar 
            {
              Element RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element v = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("ReadStatement");
                    if (v != null) { nPadre.appendChild(v); }
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("readstmt",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // readstmt ::= readstmt error 
            {
              Element RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("readstmt",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expr ::= literal 
            {
              Element RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element l = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();                
                    RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expr ::= var 
            {
              Element RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element v = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();             
                    RESULT = v;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expr ::= var ParentesisAbrir exprlist ParentesisCerrar 
            {
              Element RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Element v = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element el = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("FunctionCall");
                    if (v != null) { nPadre.appendChild(v);}
                    if (el != null) { nPadre.appendChild(el);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expr ::= var ParentesisAbrir ParentesisCerrar 
            {
              Element RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Element v = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("FunctionCall");
                    if (v != null) { nPadre.appendChild(v);}
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expr ::= expr opRelacion expr 
            {
              Element RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Element e1 = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element op = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element e2 = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    op.appendChild(e1);
                    op.appendChild(e2);
                    RESULT = op;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expr ::= expr opArit expr 
            {
              Element RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Element e1 = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element op = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element e2 = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    op.appendChild(e1);
                    op.appendChild(e2);
                    RESULT = op;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expr ::= opUnario expr 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element op = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Expression");
                    if (op != null) { nPadre.appendChild(op);}
                    if (e != null) { nPadre.appendChild(e);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expr ::= exprLogical 
            {
              Element RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Expression");
                    if (e != null) { nPadre.appendChild(e);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // exprLogical ::= ParentesisAbrir expr ParentesisCerrar exprOpLog 
            {
              Element RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Element e1 = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element e2 = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Expression");
                    if (e1 != null) { nPadre.appendChild(e1);}
                    if (e2 != null) { nPadre.appendChild(e2);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprLogical",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // exprOpLog ::= 
            {
              Element RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprOpLog",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // exprOpLog ::= opLogico exprLogical 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element op = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Expression");
                    if (op != null) { nPadre.appendChild(op);}
                    if (e != null)  { nPadre.appendChild(e);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprOpLog",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // opRelacion ::= OperadorIgual 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("RelationalOp");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opRelacion",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // opRelacion ::= OperadorDiferente 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("RelationalOp");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opRelacion",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // opRelacion ::= OperadorMayor 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("RelationalOp");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opRelacion",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // opRelacion ::= OperadorMenor 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("RelationalOp");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opRelacion",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // opRelacion ::= OperadorMenorIgual 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("RelationalOp");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opRelacion",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // opRelacion ::= OperadorMayorIgual 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("RelationalOp");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opRelacion",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // opArit ::= OperadorSuma 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("ArithmeticOp");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opArit",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // opArit ::= OperadorResta 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("ArithmeticOp");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opArit",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // opArit ::= OperadorMultiplicacion 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("ArithmeticOp");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opArit",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // opArit ::= OperadorDivision 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("ArithmeticOp");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opArit",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // opArit ::= OperadorMod 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("ArithmeticOp");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opArit",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // opArit ::= OperadorDivisionSpecial 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("ArithmeticOp");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opArit",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // opUnario ::= OperadorNot 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("UnaryOp");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opUnario",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // opUnario ::= OperadorSuma 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("UnaryOp");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opUnario",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // opUnario ::= OperadorResta 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("UnaryOp");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opUnario",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // opLogico ::= OperadorAnd 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("LogicalOp");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opLogico",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // opLogico ::= OperadorOr 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("LogicalOp");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opLogico",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // exprlist ::= expr 
            {
              Element RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("ExprList");
                    if (e != null) { nPadre.appendChild(e);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprlist",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // exprlist ::= expr Coma exprlist 
            {
              Element RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element el = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("ExprList");
                    if (e != null) { nPadre.appendChild(e);}
                    if (el != null) { nPadre.appendChild(el);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprlist",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // literal ::= integer 
            {
              Element RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element i = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    RESULT = i;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // literal ::= character 
            {
              Element RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element c = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    RESULT = c;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // literal ::= boolean 
            {
              Element RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element b = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    RESULT = b;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // literal ::= string 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    RESULT = s;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // integer ::= LiteralEntero 
            {
              Element RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Integer");
                    nPadre.setAttribute("Value",i.toString());
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("integer",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // character ::= LiteralCaracter 
            {
              Element RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Character c = (Character)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Character");
                    nPadre.setAttribute("Value",c.toString());            
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("character",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // boolean ::= LiteralBoolean 
            {
              Element RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Boolean");
                    nPadre.setAttribute("Value",b);          
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // string ::= LiteralString 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("String");
                    nPadre.setAttribute("Value",s);
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("string",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
