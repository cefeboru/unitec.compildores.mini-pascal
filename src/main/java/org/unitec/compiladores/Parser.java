
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package org.unitec.compiladores;

import java_cup.runtime.*;
import java.util.List;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import java.io.File;
import java.io.StringWriter;
import org.w3c.dom.CDATASection;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;
import org.w3c.dom.Node;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\136\000\002\005\007\000\002\002\004\000\002\006" +
    "\006\000\002\007\006\000\002\011\002\000\002\011\004" +
    "\000\002\012\004\000\002\012\003\000\002\012\003\000" +
    "\002\022\014\000\002\022\013\000\002\025\012\000\002" +
    "\025\011\000\002\026\002\000\002\026\004\000\002\027" +
    "\004\000\002\023\003\000\002\023\005\000\002\024\006" +
    "\000\002\024\005\000\002\014\002\000\002\014\005\000" +
    "\002\015\005\000\002\034\003\000\002\034\005\000\002" +
    "\035\003\000\002\030\003\000\002\030\003\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\032\010\000\002\033\003\000\002\033\003\000" +
    "\002\033\003\000\002\047\003\000\002\047\005\000\002" +
    "\050\002\000\002\050\003\000\002\050\003\000\002\050" +
    "\003\000\002\050\003\000\002\050\003\000\002\050\003" +
    "\000\002\050\003\000\002\050\003\000\002\055\005\000" +
    "\002\051\005\000\002\052\010\000\002\052\006\000\002" +
    "\020\010\000\002\053\006\000\002\054\006\000\002\056" +
    "\006\000\002\056\010\000\002\057\006\000\002\003\003" +
    "\000\002\003\003\000\002\003\006\000\002\003\005\000" +
    "\002\003\005\000\002\003\004\000\002\003\003\000\002" +
    "\041\006\000\002\042\002\000\002\042\004\000\002\043" +
    "\003\000\002\043\003\000\002\043\003\000\002\043\003" +
    "\000\002\043\003\000\002\043\003\000\002\044\003\000" +
    "\002\044\003\000\002\044\003\000\002\044\003\000\002" +
    "\044\003\000\002\044\003\000\002\045\003\000\002\045" +
    "\003\000\002\045\003\000\002\046\003\000\002\046\003" +
    "\000\002\040\003\000\002\040\005\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\060\003\000\002\061\003\000\002\062\003\000\002\063" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\267\000\004\070\004\001\002\000\004\061\010\001" +
    "\002\000\004\002\006\001\002\000\004\002\000\001\002" +
    "\000\004\074\011\001\002\000\062\016\uffe8\017\uffe8\020" +
    "\uffe8\021\uffe8\022\uffe8\023\uffe8\027\uffe8\030\uffe8\031\uffe8" +
    "\032\uffe8\033\uffe8\034\uffe8\036\uffe8\037\uffe8\042\uffe8\044" +
    "\uffe8\045\uffe8\050\uffe8\055\uffe8\057\uffe8\060\uffe8\066\uffe8" +
    "\067\uffe8\074\uffe8\001\002\000\012\011\021\041\ufffd\071" +
    "\017\072\012\001\002\000\004\061\010\001\002\000\004" +
    "\041\250\001\002\000\012\011\021\041\ufffd\071\017\072" +
    "\012\001\002\000\012\011\ufff9\041\ufff9\071\ufff9\072\ufff9" +
    "\001\002\000\012\011\ufffa\041\ufffa\071\ufffa\072\ufffa\001" +
    "\002\000\004\061\010\001\002\000\004\073\054\001\002" +
    "\000\014\011\uffed\041\uffed\061\010\071\uffed\072\uffed\001" +
    "\002\000\004\074\052\001\002\000\006\055\050\057\uffea" +
    "\001\002\000\004\057\026\001\002\000\012\011\ufffb\041" +
    "\ufffb\071\ufffb\072\ufffb\001\002\000\014\006\034\012\031" +
    "\013\036\014\035\015\033\001\002\000\004\074\uffe7\001" +
    "\002\000\004\074\uffe6\001\002\000\006\067\uffe3\074\uffe3" +
    "\001\002\000\004\074\uffeb\001\002\000\006\067\uffe4\074" +
    "\uffe4\001\002\000\004\051\037\001\002\000\006\067\uffe2" +
    "\074\uffe2\001\002\000\006\067\uffe5\074\uffe5\001\002\000" +
    "\004\077\041\001\002\000\004\052\042\001\002\000\056" +
    "\016\uffa7\017\uffa7\020\uffa7\021\uffa7\022\uffa7\023\uffa7\027" +
    "\uffa7\030\uffa7\031\uffa7\032\uffa7\033\uffa7\034\uffa7\036\uffa7" +
    "\037\uffa7\042\uffa7\044\uffa7\045\uffa7\050\uffa7\052\uffa7\055" +
    "\uffa7\067\uffa7\074\uffa7\001\002\000\004\007\043\001\002" +
    "\000\010\012\044\013\047\014\046\001\002\000\004\074" +
    "\uffdf\001\002\000\004\074\uffe1\001\002\000\004\074\uffde" +
    "\001\002\000\004\074\uffe0\001\002\000\004\061\010\001" +
    "\002\000\004\057\uffe9\001\002\000\014\011\uffed\041\uffed" +
    "\061\010\071\uffed\072\uffed\001\002\000\012\011\uffec\041" +
    "\uffec\071\uffec\072\uffec\001\002\000\004\002\001\001\002" +
    "\000\004\066\056\001\002\000\010\011\063\061\010\067" +
    "\061\001\002\000\006\067\ufff1\074\245\001\002\000\004" +
    "\067\241\001\002\000\004\074\071\001\002\000\004\057" +
    "\067\001\002\000\004\061\010\001\002\000\004\057\065" +
    "\001\002\000\012\012\031\013\036\014\035\015\033\001" +
    "\002\000\006\067\uffef\074\uffef\001\002\000\012\012\031" +
    "\013\036\014\035\015\033\001\002\000\006\067\uffee\074" +
    "\uffee\001\002\000\006\011\075\041\ufff4\001\002\000\004" +
    "\074\240\001\002\000\004\041\100\001\002\000\006\011" +
    "\075\041\ufff4\001\002\000\010\011\uffed\041\uffed\061\010" +
    "\001\002\000\006\011\ufff2\041\ufff2\001\002\000\004\041" +
    "\ufff3\001\002\000\026\004\101\005\121\035\113\041\103" +
    "\042\uffdb\043\102\046\116\047\105\061\010\074\uffdb\001" +
    "\002\000\004\066\232\001\002\000\004\061\010\001\002" +
    "\000\026\004\101\005\121\035\113\041\103\042\uffdb\043" +
    "\102\046\116\047\105\061\010\074\uffdb\001\002\000\012" +
    "\037\uffd8\042\uffd8\050\uffd8\074\uffd8\001\002\000\026\004" +
    "\101\005\121\035\113\041\103\043\102\046\116\047\105" +
    "\050\uffdb\061\010\074\uffdb\001\002\000\012\037\uffd7\042" +
    "\uffd7\050\uffd7\074\uffd7\001\002\000\012\037\uffd4\042\uffd4" +
    "\050\uffd4\074\uffd4\001\002\000\012\037\uffd3\042\uffd3\050" +
    "\uffd3\074\uffd3\001\002\000\012\037\uffda\042\uffda\050\uffda" +
    "\074\uffda\001\002\000\004\042\217\001\002\000\024\026" +
    "\134\027\136\030\147\061\010\066\146\077\041\100\137" +
    "\101\143\102\125\001\002\000\012\037\uffd9\042\uffd9\050" +
    "\uffd9\074\uffd9\001\002\000\004\060\210\001\002\000\024" +
    "\026\134\027\136\030\147\061\010\066\146\077\041\100" +
    "\137\101\143\102\125\001\002\000\012\037\uffd5\042\uffd5" +
    "\050\uffd5\074\uffd5\001\002\000\012\037\uffdd\042\uffdd\050" +
    "\uffdd\074\127\001\002\000\004\066\123\001\002\000\012" +
    "\037\uffd6\042\uffd6\050\uffd6\074\uffd6\001\002\000\004\102" +
    "\125\001\002\000\004\067\126\001\002\000\054\016\uffa4" +
    "\017\uffa4\020\uffa4\021\uffa4\022\uffa4\023\uffa4\027\uffa4\030" +
    "\uffa4\031\uffa4\032\uffa4\033\uffa4\034\uffa4\036\uffa4\037\uffa4" +
    "\042\uffa4\044\uffa4\045\uffa4\050\uffa4\055\uffa4\067\uffa4\074" +
    "\uffa4\001\002\000\012\037\uffc9\042\uffc9\050\uffc9\074\uffc9" +
    "\001\002\000\032\004\101\005\121\035\113\037\uffdb\041" +
    "\103\042\uffdb\043\102\046\116\047\105\050\uffdb\061\010" +
    "\074\uffdb\001\002\000\012\037\uffdc\042\uffdc\050\uffdc\074" +
    "\uffdc\001\002\000\054\016\uffa8\017\uffa8\020\uffa8\021\uffa8" +
    "\022\uffa8\023\uffa8\027\uffa8\030\uffa8\031\uffa8\032\uffa8\033" +
    "\uffa8\034\uffa8\036\uffa8\037\uffa8\042\uffa8\044\uffa8\045\uffa8" +
    "\050\uffa8\055\uffa8\067\uffa8\074\uffa8\001\002\000\054\016" +
    "\uffaa\017\uffaa\020\uffaa\021\uffaa\022\uffaa\023\uffaa\027\uffaa" +
    "\030\uffaa\031\uffaa\032\uffaa\033\uffaa\034\uffaa\036\uffaa\037" +
    "\uffaa\042\uffaa\044\uffaa\045\uffaa\050\uffaa\055\uffaa\067\uffaa" +
    "\074\uffaa\001\002\000\034\016\154\017\162\020\153\021" +
    "\167\022\164\023\157\027\151\030\161\031\163\032\152" +
    "\033\156\034\165\045\206\001\002\000\024\026\uffb2\027" +
    "\uffb2\030\uffb2\061\uffb2\066\uffb2\077\uffb2\100\uffb2\101\uffb2" +
    "\102\uffb2\001\002\000\054\016\uffc2\017\uffc2\020\uffc2\021" +
    "\uffc2\022\uffc2\023\uffc2\027\uffc2\030\uffc2\031\uffc2\032\uffc2" +
    "\033\uffc2\034\uffc2\036\uffc2\037\uffc2\042\uffc2\044\uffc2\045" +
    "\uffc2\050\uffc2\055\uffc2\067\uffc2\074\uffc2\001\002\000\024" +
    "\026\uffb1\027\uffb1\030\uffb1\061\uffb1\066\uffb1\077\uffb1\100" +
    "\uffb1\101\uffb1\102\uffb1\001\002\000\054\016\uffa6\017\uffa6" +
    "\020\uffa6\021\uffa6\022\uffa6\023\uffa6\027\uffa6\030\uffa6\031" +
    "\uffa6\032\uffa6\033\uffa6\034\uffa6\036\uffa6\037\uffa6\042\uffa6" +
    "\044\uffa6\045\uffa6\050\uffa6\055\uffa6\067\uffa6\074\uffa6\001" +
    "\002\000\054\016\uffc8\017\uffc8\020\uffc8\021\uffc8\022\uffc8" +
    "\023\uffc8\027\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8\034" +
    "\uffc8\036\uffc8\037\uffc8\042\uffc8\044\uffc8\045\uffc8\050\uffc8" +
    "\055\uffc8\067\uffc8\074\uffc8\001\002\000\054\016\uffab\017" +
    "\uffab\020\uffab\021\uffab\022\uffab\023\uffab\027\uffab\030\uffab" +
    "\031\uffab\032\uffab\033\uffab\034\uffab\036\uffab\037\uffab\042" +
    "\uffab\044\uffab\045\uffab\050\uffab\055\uffab\067\uffab\074\uffab" +
    "\001\002\000\024\026\134\027\136\030\147\061\010\066" +
    "\146\077\041\100\137\101\143\102\125\001\002\000\054" +
    "\016\uffa5\017\uffa5\020\uffa5\021\uffa5\022\uffa5\023\uffa5\027" +
    "\uffa5\030\uffa5\031\uffa5\032\uffa5\033\uffa5\034\uffa5\036\uffa5" +
    "\037\uffa5\042\uffa5\044\uffa5\045\uffa5\050\uffa5\055\uffa5\067" +
    "\uffa5\074\uffa5\001\002\000\056\016\uffc7\017\uffc7\020\uffc7" +
    "\021\uffc7\022\uffc7\023\uffc7\027\uffc7\030\uffc7\031\uffc7\032" +
    "\uffc7\033\uffc7\034\uffc7\036\uffc7\037\uffc7\042\uffc7\044\uffc7" +
    "\045\uffc7\050\uffc7\055\uffc7\066\177\067\uffc7\074\uffc7\001" +
    "\002\000\054\016\uffa9\017\uffa9\020\uffa9\021\uffa9\022\uffa9" +
    "\023\uffa9\027\uffa9\030\uffa9\031\uffa9\032\uffa9\033\uffa9\034" +
    "\uffa9\036\uffa9\037\uffa9\042\uffa9\044\uffa9\045\uffa9\050\uffa9" +
    "\055\uffa9\067\uffa9\074\uffa9\001\002\000\024\026\134\027" +
    "\136\030\147\061\010\066\146\077\041\100\137\101\143" +
    "\102\125\001\002\000\024\026\uffb0\027\uffb0\030\uffb0\061" +
    "\uffb0\066\uffb0\077\uffb0\100\uffb0\101\uffb0\102\uffb0\001\002" +
    "\000\034\016\154\017\162\020\153\021\167\022\164\023" +
    "\157\027\151\030\161\031\163\032\152\033\156\034\165" +
    "\067\166\001\002\000\024\026\uffb8\027\uffb8\030\uffb8\061" +
    "\uffb8\066\uffb8\077\uffb8\100\uffb8\101\uffb8\102\uffb8\001\002" +
    "\000\024\026\uffb4\027\uffb4\030\uffb4\061\uffb4\066\uffb4\077" +
    "\uffb4\100\uffb4\101\uffb4\102\uffb4\001\002\000\024\026\uffbc" +
    "\027\uffbc\030\uffbc\061\uffbc\066\uffbc\077\uffbc\100\uffbc\101" +
    "\uffbc\102\uffbc\001\002\000\024\026\uffbe\027\uffbe\030\uffbe" +
    "\061\uffbe\066\uffbe\077\uffbe\100\uffbe\101\uffbe\102\uffbe\001" +
    "\002\000\024\026\134\027\136\030\147\061\010\066\146" +
    "\077\041\100\137\101\143\102\125\001\002\000\024\026" +
    "\uffb5\027\uffb5\030\uffb5\061\uffb5\066\uffb5\077\uffb5\100\uffb5" +
    "\101\uffb5\102\uffb5\001\002\000\024\026\uffba\027\uffba\030" +
    "\uffba\061\uffba\066\uffba\077\uffba\100\uffba\101\uffba\102\uffba" +
    "\001\002\000\024\026\134\027\136\030\147\061\010\066" +
    "\146\077\041\100\137\101\143\102\125\001\002\000\024" +
    "\026\uffb7\027\uffb7\030\uffb7\061\uffb7\066\uffb7\077\uffb7\100" +
    "\uffb7\101\uffb7\102\uffb7\001\002\000\024\026\uffbd\027\uffbd" +
    "\030\uffbd\061\uffbd\066\uffbd\077\uffbd\100\uffbd\101\uffbd\102" +
    "\uffbd\001\002\000\024\026\uffb6\027\uffb6\030\uffb6\061\uffb6" +
    "\066\uffb6\077\uffb6\100\uffb6\101\uffb6\102\uffb6\001\002\000" +
    "\024\026\uffb9\027\uffb9\030\uffb9\061\uffb9\066\uffb9\077\uffb9" +
    "\100\uffb9\101\uffb9\102\uffb9\001\002\000\024\026\uffb3\027" +
    "\uffb3\030\uffb3\061\uffb3\066\uffb3\077\uffb3\100\uffb3\101\uffb3" +
    "\102\uffb3\001\002\000\060\016\uffc0\017\uffc0\020\uffc0\021" +
    "\uffc0\022\uffc0\023\uffc0\024\171\025\172\027\uffc0\030\uffc0" +
    "\031\uffc0\032\uffc0\033\uffc0\034\uffc0\036\uffc0\037\uffc0\042" +
    "\uffc0\044\uffc0\045\uffc0\050\uffc0\055\uffc0\067\uffc0\074\uffc0" +
    "\001\002\000\024\026\uffbb\027\uffbb\030\uffbb\061\uffbb\066" +
    "\uffbb\077\uffbb\100\uffbb\101\uffbb\102\uffbb\001\002\000\004" +
    "\066\146\001\002\000\004\066\uffaf\001\002\000\004\066" +
    "\uffae\001\002\000\054\016\uffc1\017\uffc1\020\uffc1\021\uffc1" +
    "\022\uffc1\023\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1\033" +
    "\uffc1\034\uffc1\036\uffc1\037\uffc1\042\uffc1\044\uffc1\045\uffc1" +
    "\050\uffc1\055\uffc1\067\uffc1\074\uffc1\001\002\000\054\016" +
    "\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf\027\uffbf" +
    "\030\uffbf\031\uffbf\032\uffbf\033\uffbf\034\uffbf\036\uffbf\037" +
    "\uffbf\042\uffbf\044\uffbf\045\uffbf\050\uffbf\055\uffbf\067\uffbf" +
    "\074\uffbf\001\002\000\054\016\154\017\162\020\153\021" +
    "\167\022\164\023\157\027\151\030\161\031\163\032\152" +
    "\033\156\034\165\036\uffc4\037\uffc4\042\uffc4\044\uffc4\045" +
    "\uffc4\050\uffc4\055\uffc4\067\uffc4\074\uffc4\001\002\000\054" +
    "\016\154\017\162\020\153\021\167\022\164\023\157\027" +
    "\151\030\161\031\163\032\152\033\156\034\165\036\uffc5" +
    "\037\uffc5\042\uffc5\044\uffc5\045\uffc5\050\uffc5\055\uffc5\067" +
    "\uffc5\074\uffc5\001\002\000\024\026\134\027\136\030\147" +
    "\061\010\066\146\077\041\100\137\101\143\102\125\001" +
    "\002\000\004\067\204\001\002\000\036\016\154\017\162" +
    "\020\153\021\167\022\164\023\157\027\151\030\161\031" +
    "\163\032\152\033\156\034\165\055\202\067\uffad\001\002" +
    "\000\024\026\134\027\136\030\147\061\010\066\146\077" +
    "\041\100\137\101\143\102\125\001\002\000\004\067\uffac" +
    "\001\002\000\054\016\uffc6\017\uffc6\020\uffc6\021\uffc6\022" +
    "\uffc6\023\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6" +
    "\034\uffc6\036\uffc6\037\uffc6\042\uffc6\044\uffc6\045\uffc6\050" +
    "\uffc6\055\uffc6\067\uffc6\074\uffc6\001\002\000\054\016\154" +
    "\017\162\020\153\021\167\022\164\023\157\027\151\030" +
    "\161\031\163\032\152\033\156\034\165\036\uffc3\037\uffc3" +
    "\042\uffc3\044\uffc3\045\uffc3\050\uffc3\055\uffc3\067\uffc3\074" +
    "\uffc3\001\002\000\032\004\101\005\121\035\113\037\uffdb" +
    "\041\103\042\uffdb\043\102\046\116\047\105\050\uffdb\061" +
    "\010\074\uffdb\001\002\000\012\037\uffcd\042\uffcd\050\uffcd" +
    "\074\uffcd\001\002\000\024\026\134\027\136\030\147\061" +
    "\010\066\146\077\041\100\137\101\143\102\125\001\002" +
    "\000\044\016\154\017\162\020\153\021\167\022\164\023" +
    "\157\027\151\030\161\031\163\032\152\033\156\034\165" +
    "\037\uffd1\042\uffd1\044\uffd1\050\uffd1\074\uffd1\001\002\000" +
    "\034\016\154\017\162\020\153\021\167\022\164\023\157" +
    "\027\151\030\161\031\163\032\152\033\156\034\165\036" +
    "\213\001\002\000\032\004\101\005\121\035\113\037\uffdb" +
    "\041\103\042\uffdb\043\102\046\116\047\105\050\uffdb\061" +
    "\010\074\uffdb\001\002\000\012\037\215\042\uffcf\050\uffcf" +
    "\074\uffcf\001\002\000\032\004\101\005\121\035\113\037" +
    "\uffdb\041\103\042\uffdb\043\102\046\116\047\105\050\uffdb" +
    "\061\010\074\uffdb\001\002\000\012\037\uffd0\042\uffd0\050" +
    "\uffd0\074\uffd0\001\002\000\004\074\ufffe\001\002\000\004" +
    "\050\221\001\002\000\024\026\134\027\136\030\147\061" +
    "\010\066\146\077\041\100\137\101\143\102\125\001\002" +
    "\000\042\016\154\017\162\020\153\021\167\022\164\023" +
    "\157\027\151\030\161\031\163\032\152\033\156\034\165" +
    "\037\uffcc\042\uffcc\050\uffcc\074\uffcc\001\002\000\004\042" +
    "\224\001\002\000\012\037\uffd2\042\uffd2\050\uffd2\074\uffd2" +
    "\001\002\000\004\044\226\001\002\000\024\026\134\027" +
    "\136\030\147\061\010\066\146\077\041\100\137\101\143" +
    "\102\125\001\002\000\034\016\154\017\162\020\153\021" +
    "\167\022\164\023\157\027\151\030\161\031\163\032\152" +
    "\033\156\034\165\045\230\001\002\000\032\004\101\005" +
    "\121\035\113\037\uffdb\041\103\042\uffdb\043\102\046\116" +
    "\047\105\050\uffdb\061\010\074\uffdb\001\002\000\012\037" +
    "\uffce\042\uffce\050\uffce\074\uffce\001\002\000\004\102\125" +
    "\001\002\000\006\055\234\067\235\001\002\000\004\061" +
    "\010\001\002\000\012\037\uffcb\042\uffcb\050\uffcb\074\uffcb" +
    "\001\002\000\004\067\237\001\002\000\012\037\uffca\042" +
    "\uffca\050\uffca\074\uffca\001\002\000\012\011\ufff5\041\ufff5" +
    "\071\ufff5\072\ufff5\001\002\000\004\074\242\001\002\000" +
    "\006\011\075\041\ufff4\001\002\000\004\074\244\001\002" +
    "\000\012\011\ufff6\041\ufff6\071\ufff6\072\ufff6\001\002\000" +
    "\006\011\063\061\010\001\002\000\004\067\ufff0\001\002" +
    "\000\004\041\ufffc\001\002\000\026\004\101\005\121\035" +
    "\113\041\103\042\uffdb\043\102\046\116\047\105\061\010" +
    "\074\uffdb\001\002\000\004\042\252\001\002\000\004\073" +
    "\uffff\001\002\000\004\066\254\001\002\000\010\011\063" +
    "\061\010\067\256\001\002\000\004\067\264\001\002\000" +
    "\004\057\257\001\002\000\014\006\034\012\031\013\036" +
    "\014\035\015\033\001\002\000\004\074\261\001\002\000" +
    "\006\011\075\041\ufff4\001\002\000\004\074\263\001\002" +
    "\000\012\011\ufff7\041\ufff7\071\ufff7\072\ufff7\001\002\000" +
    "\004\057\265\001\002\000\014\006\034\012\031\013\036" +
    "\014\035\015\033\001\002\000\004\074\267\001\002\000" +
    "\006\011\075\041\ufff4\001\002\000\004\074\271\001\002" +
    "\000\012\011\ufff8\041\ufff8\071\ufff8\072\ufff8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\267\000\004\005\004\001\001\000\004\035\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\006\017\011\012\012\013\022" +
    "\015\025\014\001\001\000\004\035\252\001\001\000\002" +
    "\001\001\000\012\011\246\012\013\022\015\025\014\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\035\054" +
    "\001\001\000\002\001\001\000\012\014\024\015\021\034" +
    "\023\035\022\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\030\031\031" +
    "\026\032\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\060\037\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\033\044\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\034\050\035\022\001\001\000\002\001\001\000\012" +
    "\014\052\015\021\034\023\035\022\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\023\057" +
    "\024\056\034\061\035\022\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\034\063\035\022\001\001\000\002\001\001\000\004\031" +
    "\065\001\001\000\002\001\001\000\004\031\067\001\001" +
    "\000\002\001\001\000\010\007\071\026\072\027\073\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\026\076" +
    "\027\073\001\001\000\012\014\075\015\021\034\023\035" +
    "\022\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\020\103\035\114\047\111\050\117\051\110\052\113\053" +
    "\105\054\121\055\107\056\106\057\116\001\001\000\002" +
    "\001\001\000\006\035\114\051\224\001\001\000\030\020" +
    "\103\035\114\047\222\050\117\051\110\052\113\053\105" +
    "\054\121\055\107\056\106\057\116\001\001\000\002\001" +
    "\001\000\030\020\103\035\114\047\217\050\117\051\110" +
    "\052\113\053\105\054\121\055\107\056\106\057\116\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\003\211\004" +
    "\137\035\143\041\134\045\141\060\140\061\131\062\144" +
    "\063\130\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\003\132\004\137\035\143\041\134\045\141\060\140" +
    "\061\131\062\144\063\130\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\063\123\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\020\103\035\114\047\127\050\117" +
    "\051\110\052\113\053\105\054\121\055\107\056\106\057" +
    "\116\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\043\154\044\157\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\003\204\004" +
    "\137\035\143\041\134\045\141\060\140\061\131\062\144" +
    "\063\130\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\003\147\004\137\035\143\041\134" +
    "\045\141\060\140\061\131\062\144\063\130\001\001\000" +
    "\002\001\001\000\006\043\154\044\157\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\003\175\004\137\035\143\041\134\045\141" +
    "\060\140\061\131\062\144\063\130\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\003\174\004\137\035\143" +
    "\041\134\045\141\060\140\061\131\062\144\063\130\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\042\172\046" +
    "\167\001\001\000\002\001\001\000\004\041\173\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\043\154\044\157\001\001\000\006" +
    "\043\154\044\157\001\001\000\026\003\200\004\137\035" +
    "\143\040\177\041\134\045\141\060\140\061\131\062\144" +
    "\063\130\001\001\000\002\001\001\000\006\043\154\044" +
    "\157\001\001\000\026\003\200\004\137\035\143\040\202" +
    "\041\134\045\141\060\140\061\131\062\144\063\130\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\043\154" +
    "\044\157\001\001\000\026\020\103\035\114\050\206\051" +
    "\110\052\113\053\105\054\121\055\107\056\106\057\116" +
    "\001\001\000\002\001\001\000\024\003\210\004\137\035" +
    "\143\041\134\045\141\060\140\061\131\062\144\063\130" +
    "\001\001\000\006\043\154\044\157\001\001\000\006\043" +
    "\154\044\157\001\001\000\026\020\103\035\114\050\213" +
    "\051\110\052\113\053\105\054\121\055\107\056\106\057" +
    "\116\001\001\000\002\001\001\000\026\020\103\035\114" +
    "\050\215\051\110\052\113\053\105\054\121\055\107\056" +
    "\106\057\116\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\003\221\004\137\035\143\041" +
    "\134\045\141\060\140\061\131\062\144\063\130\001\001" +
    "\000\006\043\154\044\157\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\003\226\004\137" +
    "\035\143\041\134\045\141\060\140\061\131\062\144\063" +
    "\130\001\001\000\006\043\154\044\157\001\001\000\030" +
    "\020\103\035\114\047\230\050\117\051\110\052\113\053" +
    "\105\054\121\055\107\056\106\057\116\001\001\000\002" +
    "\001\001\000\004\063\232\001\001\000\002\001\001\000" +
    "\004\035\235\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\007\242\026\072\027\073\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\023\245\024\056\034\061\035" +
    "\022\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\020\103\035\114\047\250\050\117\051\110\052\113\053" +
    "\105\054\121\055\107\056\106\057\116\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\023" +
    "\254\024\056\034\061\035\022\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\030\257\031\026\032\027\001" +
    "\001\000\002\001\001\000\010\007\261\026\072\027\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\030\265\031\026\032\027\001\001\000\002" +
    "\001\001\000\010\007\267\026\072\027\073\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



        @Override
	public void report_error(String message, Object info) {
            
            if (info instanceof String)
                    System.err.println(" " + info + " " + message + "\n");
            else {
                    StringBuffer m = new StringBuffer("Error ");
                    if (info instanceof java_cup.runtime.Symbol) {
                        m.append(("(Se ha encontrado el token \"" + ((Symbol)info).value + "\" en la linea "
                            + ((Symbol)info).left + 1 + ", columna " + ((Symbol)info).right + " " + 1) + ")");
                    }
                    if (message.equals("Couldn't repair and continue parse"))
                        m.append(" : No existe una regla por los momentos para este token.");
                    else
                        m.append(" : " + message);
                    System.err.println(m);
            }
        }

        @Override
	public void syntax_error(Symbol s){
            System.err.println( "(Se ha encontrado el token \"" + sym.terminalNames[s.sym] + "\" en la linea " + (s.left+1) + ", columna" + (s.right+1) + ")" ); 
            expected();
        }

        public void expected(){
            List<Integer> token_list = this.expected_token_ids();
            if (token_list.size() <= 0){
                    token_list = this.expected_token_ids();
            }
            String expected_tokens = "";
            for (int i = 0 ; i < token_list.size(); i++){
                    int id = token_list.get(i);
                    if (id == 1){
                            continue;
                    }
                    String terminal_name = sym.terminalNames[id];
                    if (i == token_list.size() - 1){
                            expected_tokens += terminal_name;
                    }else{
                            expected_tokens += terminal_name + " , ";
                    }
            }
            System.err.println("Se esperaba alguno de los siguientes tokens:" + expected_tokens);
        };

        public void report_fatal_error(String message, Object info) {
            report_error(message, info);
            throw new RuntimeException("Fatal Syntax Error");
        }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {


        /* Contruccion del arbol en XML */

        Document xmlDocument = null;    
        Element nodoPadre = null; 

        private void iniXML() {
        if (xmlDocument == null) {
            try {
                DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
                DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
                xmlDocument = docBuilder.newDocument();//Crear el documento XML
            } catch (Exception e) {
                System.err.println("el Arbol tiene ERROR: " + e.getMessage());
            }
        }
    }

    public void escribirXML() throws javax.xml.transform.TransformerConfigurationException, javax.xml.transform.TransformerException {
        //Escribir el archivo XML         
        xmlDocument.appendChild(nodoPadre);
        TransformerFactory transformerFactory = TransformerFactory.newInstance();
        Transformer transformer = transformerFactory.newTransformer();
        DOMSource origen = new DOMSource(xmlDocument);
        StreamResult result = new StreamResult(new File("AST.xml"));
        transformer.transform(origen, result);
    }

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= Program var PuntoComa block Punto 
            {
              Element RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Element i = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element b = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    iniXML();
                    nodoPadre = xmlDocument.createElement("Program"); 
                    if (i != null) { nodoPadre.appendChild(i); }
                    if(b != null) { nodoPadre.appendChild(b); }
                    escribirXML();
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element start_val = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // block ::= decls Begin stmts End 
            {
              Element RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Element d = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Block");
                    if (d != null) { nPadre.appendChild(d); }
                    if (s != null) { nPadre.appendChild(s); }
                    RESULT = nPadre;                    
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // blockProc ::= procInlineDecls Begin stmts End 
            {
              Element RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Element p = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Block");
                    if (p != null) { nPadre.appendChild(p); }
                    if (s != null) { nPadre.appendChild(s); }
                    RESULT = nPadre;                    
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("blockProc",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // decls ::= 
            {
              Element RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decls",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // decls ::= decl decls 
            {
              Element RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element d = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element ds = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Declarations");
                    if (d != null && ds == null) {
                        RESULT = d;
                    } else if (d == null && ds != null){
                        RESULT = ds;
                    } else if (d != null && ds != null) {
                        nPadre.appendChild(d);
                        nPadre.appendChild(ds);
                        RESULT = nPadre;
                    } else RESULT = null;
                                        
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decls",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // decl ::= Var vardecls 
            {
              Element RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element vd = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Declaration");
                    if (vd != null) { 
                        nPadre.appendChild(vd); 
                        RESULT = nPadre;                    
                    } else RESULT = null;
                    
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // decl ::= functionDecl 
            {
              Element RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element f = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Declaration");
                    if (f != null) { nPadre.appendChild(f); RESULT = nPadre;}
                                        
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // decl ::= procedureDecl 
            {
              Element RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element p = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Declaration");
                    if (p != null) { nPadre.appendChild(p); RESULT = nPadre;}                    
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // functionDecl ::= Function var ParentesisAbrir inlineArgs ParentesisCerrar DosPuntos type PuntoComa blockProc PuntoComa 
            {
              Element RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Element i = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Element in = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Element t = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element b = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("FunctionDeclaration");
                    if (i != null) { nPadre.appendChild(i); }
                    if (in != null) { nPadre.appendChild(in); }
                    if (t != null) { nPadre.appendChild(t); }
                    if (b != null) { nPadre.appendChild(b); }

                    RESULT = nPadre;                    
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functionDecl",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // functionDecl ::= Function var ParentesisAbrir ParentesisCerrar DosPuntos type PuntoComa blockProc PuntoComa 
            {
              Element RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Element i = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Element t = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element b = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("FunctionDeclaration");
                    if (i != null) { nPadre.appendChild(i); }
                    if (t != null) { nPadre.appendChild(t); }
                    if (b != null) { nPadre.appendChild(b); }

                    RESULT = nPadre;                    
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("functionDecl",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // procedureDecl ::= Procedure var ParentesisAbrir inlineArgs ParentesisCerrar PuntoComa blockProc PuntoComa 
            {
              Element RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Element i = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Element in = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element b = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("ProcedureDeclaration");
                    if (i != null) { nPadre.appendChild(i); }
                    if (in != null) { nPadre.appendChild(in); }
                    if (b != null) { nPadre.appendChild(b); }

                    RESULT = nPadre;                    
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedureDecl",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // procedureDecl ::= Procedure var ParentesisAbrir ParentesisCerrar PuntoComa blockProc PuntoComa 
            {
              Element RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Element i = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element b = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    iniXML(); 
                    Element nPadre = xmlDocument.createElement("ProcedureDeclaration");
                    if (i != null) { nPadre.appendChild(i); }
                    if (b != null) { nPadre.appendChild(b); }

                    RESULT = nPadre;                    
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedureDecl",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // procInlineDecls ::= 
            {
              Element RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procInlineDecls",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // procInlineDecls ::= procInlineDecl procInlineDecls 
            {
              Element RESULT =null;
		int pdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element pd = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element pds = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("ProcInlinceDecls");
                    if (pd != null && pds == null) {
                        RESULT = pd;
                    } else if(pd == null && pds != null) {
                        RESULT = pds;
                    } else if(pd != null && pds != null) {
                        nPadre.appendChild(pd);
                        nPadre.appendChild(pds);
                        RESULT = nPadre;
                    } else RESULT = null;               
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procInlineDecls",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // procInlineDecl ::= Var vardecls 
            {
              Element RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element vd = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("VarsDeclarations");
                    if (vd != null){
                        nPadre.appendChild(vd);
                        RESULT = nPadre;
                    }               
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procInlineDecl",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // inlineArgs ::= inlineArg 
            {
              Element RESULT =null;
		int ialeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element ia = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Arguments");
                    if(ia != null) {
                        nPadre.appendChild(ia);
                        RESULT = nPadre;
                    }
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inlineArgs",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // inlineArgs ::= inlineArg PuntoComa inlineArgs 
            {
              Element RESULT =null;
		int ialeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Element ia = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int iasleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iasright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element ias = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Arguments");
                    if(ia != null && ias == null) {
                        RESULT = ia;
                    } else if(ia == null && ias != null) {
                        RESULT = ias;
                    } else if(ia == null && ias == null) {
                        nPadre.appendChild(ia);
                        nPadre.appendChild(ias);
                        RESULT = nPadre;
                    }
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inlineArgs",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // inlineArg ::= Var vars DosPuntos identtype 
            {
              Element RESULT =null;
		int vsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Element vs = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("inlineArg");
                    if(vs != null) {
                        nPadre.appendChild(vs);
                    }
                    if( i != null ) {
                        Element nType = xmlDocument.createElement("Type");
                        nType.setAttribute("Value",i);
                        nPadre.appendChild(nType);                        
                    }
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inlineArg",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // inlineArg ::= vars DosPuntos identtype 
            {
              Element RESULT =null;
		int vsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Element vs = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("inlineArg");
                    if(vs != null) {
                        nPadre.appendChild(vs);
                    }
                    if( i != null ) {
                        Element nType = xmlDocument.createElement("Type");
                        nType.setAttribute("Value",i);
                        nPadre.appendChild(nType);                        
                    }
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inlineArg",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // vardecls ::= 
            {
              Element RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vardecls",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // vardecls ::= vardecl PuntoComa vardecls 
            {
              Element RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Element v = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element vs = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("VarsDeclarations");
                    if(v != null && vs == null ){
                        RESULT = v;
                    } else if(v == null && vs != null){
                        RESULT = vs;
                    } else if(v != null && vs != null){
                        nPadre.appendChild(v);
                        nPadre.appendChild(vs);
                        RESULT = nPadre;
                    } else RESULT = null;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vardecls",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // vardecl ::= vars DosPuntos type 
            {
              Element RESULT =null;
		int vsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Element vs = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element t = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("VarDeclaration");
                    if (vs != null) { nPadre.appendChild(vs); }
                    nPadre.appendChild(t);
                    RESULT = nPadre;                    
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vardecl",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // vars ::= var 
            {
              Element RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element v = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Variable");
                    if (v != null) { nPadre.appendChild(v); }
                    RESULT = nPadre;                    
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vars",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // vars ::= var Coma vars 
            {
              Element RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Element v = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element vs = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Variables");
                    if (v != null) { nPadre.appendChild(v); }
                    if (vs != null) { nPadre.appendChild(vs); }
                    RESULT = nPadre;                    
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vars",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // var ::= Identificador 
            {
              Element RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Identificador");
                    nPadre.setAttribute("Value",i);            
                    RESULT = nPadre;                    
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // type ::= identtype 
            {
              Element RESULT =null;
		int itleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int itright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String it = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Type");
                    if(it != null) {
                        nPadre.setAttribute("Value",it);
                        RESULT = nPadre;
                        System.out.println("Setting Ident Atrribute");
                    } else RESULT = null;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // type ::= arraytype 
            {
              Element RESULT =null;
		int atsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int atsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element ats = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Type");
                    if(ats != null) {
                        nPadre.appendChild(ats);
                        RESULT = nPadre;
                    } else RESULT = null;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // identtype ::= TipoChar 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   RESULT = c;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identtype",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // identtype ::= TipoString 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   RESULT = c;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identtype",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // identtype ::= TipoBoolean 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   RESULT = c;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identtype",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // identtype ::= TipoInteger 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   RESULT = c;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identtype",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // arraytype ::= Array BracketAbrir integer BracketCerrar Of arrayidenttype 
            {
              Element RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Element i = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
                    iniXML();
                    Element nPadre = xmlDocument.createElement("ArrayType");
                    if(i != null){nPadre.setAttribute("InitialSize",i.getAttribute("Value"));}
                    if(t != null){nPadre.setAttribute("Type",t);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arraytype",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // arrayidenttype ::= TipoChar 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   RESULT = c;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arrayidenttype",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // arrayidenttype ::= TipoBoolean 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   RESULT = c;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arrayidenttype",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // arrayidenttype ::= TipoInteger 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                   RESULT = c;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arrayidenttype",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // stmts ::= stmt 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Statements");
                    if (s != null) { nPadre.appendChild(s); RESULT = nPadre;}
                    
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // stmts ::= stmt PuntoComa stmts 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element ss = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    Element nPadre = xmlDocument.createElement("Statements");
                    iniXML();
                    if(s != null && ss == null){
                        RESULT = s;
                    } else if(s == null && ss != null){
                        RESULT = ss;
                    } else if(s != null && ss != null){
                        nPadre.appendChild(s);
                        nPadre.appendChild(ss);
                        RESULT = nPadre;
                    } else RESULT = null;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmts",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // stmt ::= 
            {
              Element RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // stmt ::= assignstmt 
            {
              Element RESULT =null;
		int asleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int asright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element as = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Statement");
                    if (as != null) { nPadre.appendChild(as); }                 
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // stmt ::= ifstmt 
            {
              Element RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int isright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element is = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Statement");
                    if (is != null) { nPadre.appendChild(is); }                 
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // stmt ::= forstmt 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Statement");
                    if (s != null) { nPadre.appendChild(s); }                 
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // stmt ::= whilestmt 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Statement");
                    if (s != null) { nPadre.appendChild(s); }                 
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // stmt ::= repeatstmt 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Statement");
                    if (s != null) { nPadre.appendChild(s); }                 
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // stmt ::= readstmt 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Statement");
                    if (s != null) { nPadre.appendChild(s); }                 
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // stmt ::= writestmt 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Statement");
                    if (s != null) { nPadre.appendChild(s); }                 
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // stmt ::= blockstmt 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Statement");
                    if (s != null) { nPadre.appendChild(s); }                 
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // blockstmt ::= Begin stmts End 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Block");
                    if (s != null) { nPadre.appendChild(s); }             
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("blockstmt",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // assignstmt ::= var DosPuntosIgual expr 
            {
              Element RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Element i = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Assignment");
                    if (i != null) { nPadre.appendChild(i); }
                    if (e != null) { nPadre.appendChild(e); }                   
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignstmt",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ifstmt ::= If expr Then stmt Else stmt 
            {
              Element RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element s2 = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("IfStatement");
                    if (e != null) { nPadre.appendChild(e); }         
                    if (s != null) { nPadre.appendChild(s); }
                    if (s2 != null) { nPadre.appendChild(s2); }
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifstmt",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ifstmt ::= If expr Then stmt 
            {
              Element RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("IfStatement");
                    if (e != null) { nPadre.appendChild(e); }         
                    if (s != null) { nPadre.appendChild(s); }
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifstmt",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // forstmt ::= For assignstmt To expr Do stmts 
            {
              Element RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Element a = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("ForStatement");
                    if (a != null) { nPadre.appendChild(a); }
                    if (e != null) { nPadre.appendChild(e); }
                    if (s != null) { nPadre.appendChild(s); }
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("forstmt",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // whilestmt ::= While expr Do stmt 
            {
              Element RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("WhileStatement");
                    if (e != null) { nPadre.appendChild(e); }
                    if (s != null) { nPadre.appendChild(s); }
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("whilestmt",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // repeatstmt ::= Repeat stmts Until expr 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("RepeatStatement");
                    if (s != null) { nPadre.appendChild(s); }
                    if (e != null) { nPadre.appendChild(e); }
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("repeatstmt",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // writestmt ::= Write ParentesisAbrir string ParentesisCerrar 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("WriteStatement");
                    if (s != null) { nPadre.appendChild(s); }
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("writestmt",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // writestmt ::= Write ParentesisAbrir string Coma var ParentesisCerrar 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element v = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("WriteStatement");
                    if (s != null) { nPadre.appendChild(s); }
                    if (v != null) { nPadre.appendChild(v); }
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("writestmt",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // readstmt ::= Read ParentesisAbrir string ParentesisCerrar 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("ReadStatement");
                    if (s != null) { nPadre.appendChild(s); }
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("readstmt",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr ::= literal 
            {
              Element RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element l = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Expression");
                    if (l != null) { nPadre.appendChild(l); }                   
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expr ::= var 
            {
              Element RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element v = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Expression");
                    if (v != null) { nPadre.appendChild(v); }                   
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expr ::= var ParentesisAbrir exprlist ParentesisCerrar 
            {
              Element RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Element v = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element el = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("FunctionCall");
                    if (v != null) { nPadre.appendChild(v);}
                    if (el != null) { nPadre.appendChild(el);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expr ::= expr opRelacion expr 
            {
              Element RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Element e1 = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element op = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element e2 = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Expression");
                    if (e1 != null) { nPadre.appendChild(e1);}
                    if (op != null) { nPadre.appendChild(op);}
                    if (e2 != null) { nPadre.appendChild(e2);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expr ::= expr opArit expr 
            {
              Element RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Element e1 = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element op = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element e2 = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Expression");
                    if (e1 != null) { nPadre.appendChild(e1);}
                    if (op != null) { nPadre.appendChild(op);}
                    if (e2 != null) { nPadre.appendChild(e2);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expr ::= opUnario expr 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element op = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Expression");
                    if (op != null) { nPadre.appendChild(op);}
                    if (e != null) { nPadre.appendChild(e);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expr ::= exprLogical 
            {
              Element RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Expression");
                    if (e != null) { nPadre.appendChild(e);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // exprLogical ::= ParentesisAbrir expr ParentesisCerrar exprOpLog 
            {
              Element RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Element e1 = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element e2 = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Expression");
                    if (e1 != null) { nPadre.appendChild(e1);}
                    if (e2 != null) { nPadre.appendChild(e2);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprLogical",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // exprOpLog ::= 
            {
              Element RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprOpLog",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // exprOpLog ::= opLogico exprLogical 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Element op = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Expression");
                    if (op != null) { nPadre.appendChild(op);}
                    if (e != null)  { nPadre.appendChild(e);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprOpLog",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // opRelacion ::= OperadorIgual 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("RelationalOp");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opRelacion",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // opRelacion ::= OperadorDiferente 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("RelationalOp");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opRelacion",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // opRelacion ::= OperadorMayor 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("RelationalOp");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opRelacion",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // opRelacion ::= OperadorMenor 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("RelationalOp");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opRelacion",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // opRelacion ::= OperadorMenorIgual 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("RelationalOp");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opRelacion",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // opRelacion ::= OperadorMayorIgual 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("RelationalOp");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opRelacion",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // opArit ::= OperadorSuma 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("ArithmeticOp");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opArit",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // opArit ::= OperadorResta 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("ArithmeticOp");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opArit",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // opArit ::= OperadorMultiplicacion 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("ArithmeticOp");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opArit",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // opArit ::= OperadorDivision 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("ArithmeticOp");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opArit",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // opArit ::= OperadorMod 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("ArithmeticOp");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opArit",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // opArit ::= OperadorDivisionSpecial 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("ArithmeticOp");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opArit",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // opUnario ::= OperadorNot 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("UnaryOp");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opUnario",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // opUnario ::= OperadorSuma 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("UnaryOp");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opUnario",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // opUnario ::= OperadorResta 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("UnaryOp");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opUnario",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // opLogico ::= OperadorAnd 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("LogicalOp");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opLogico",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // opLogico ::= OperadorOr 
            {
              Element RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("LogicalOp");
                    if (op != null) { nPadre.setAttribute("Value",op);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("opLogico",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // exprlist ::= expr 
            {
              Element RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("ExprList");
                    if (e != null) { nPadre.appendChild(e);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprlist",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // exprlist ::= expr Coma exprlist 
            {
              Element RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Element e = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element el = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("ExprList");
                    if (e != null) { nPadre.appendChild(e);}
                    if (el != null) { nPadre.appendChild(el);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprlist",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // literal ::= integer 
            {
              Element RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element l = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Literal");
                    if (l != null) { nPadre.appendChild(l);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // literal ::= character 
            {
              Element RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element c = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Literal");
                    if (c != null) { nPadre.appendChild(c);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // literal ::= boolean 
            {
              Element RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element b = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Literal");
                    if (b != null) { nPadre.appendChild(b);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // literal ::= string 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Element s = (Element)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Literal");
                    if (s != null) { nPadre.appendChild(s);}
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // integer ::= LiteralEntero 
            {
              Element RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Integer");
                    nPadre.setAttribute("Value",i.toString());
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("integer",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // character ::= LiteralCaracter 
            {
              Element RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Character c = (Character)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Character");
                    nPadre.setAttribute("Value",c.toString());            
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("character",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // boolean ::= LiteralBoolean 
            {
              Element RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("Boolean");
                    nPadre.setAttribute("Value",b);          
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // string ::= LiteralString 
            {
              Element RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    iniXML();
                    Element nPadre = xmlDocument.createElement("String");
                    nPadre.setAttribute("Value",s);
                    RESULT = nPadre;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("string",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
